--(end of buffer or a NUL)
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("fact")
--accepting rule at line 80 ("(")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 101 ("if")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("n")
--accepting rule at line 114 (" ")
--accepting rule at line 93 ("==")
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("nn")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("nn")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 85 ("-")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("n")
--accepting rule at line 114 (" ")
--accepting rule at line 86 ("*")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("fact")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("nn")
--accepting rule at line 81 (")")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("4")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("fact")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("n")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
<int>
<id,fact>
<(>
<int>
<id,n>
<)>
<{>
<if>
<(>
<id,n>
<==>
Lval
<into>
ExpNumber:0
<)>
<{>
<return>
<intd>
ExpNumber:0
<;>
<}>
<int>
<id,nn>
<;>
<id,nn>
<=>
Lval
<id,n>
<->
Lval
<intd>
ExpNumber:0
<;>
stmt1
<return>
<(>
<id,n>
<*>
Lval
<id,fact>
<(>
<id,nn>
<)>
Lval
<)>
<;>
<}>
<int>
<id,main>
<(>
<)>
<{>
<int>
<id,n>
<;>
<id,n>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<return>
<id,fact>
<(>
<id,n>
<)>
Lval
<;>
<}>
CompUnits (1)
  FuncDef (1)
    FuncFParam (1)
    Block (2)
      BlockItems (2)
        IF_Stmt (2)
          Cond (2)
            OPEQUAL (2)
              LVal_EXP (2)
                LVal (2)
                  IDENTIFIER n
                  ArrayExps (2)
              IntConst (2)
                CONSTANTOCT: 0
          Block_Stmt (3)
            Block (3)
              BlockItems (3)
                Return_Stmt (3)
                  IntConst (3)
                    CONSTANTINTD: 1
        BlockItems (5)
          VarDecl (5)
            IDENTIFIER nn
          BlockItems (6)
            Lval_Opassign_Stmt (6)
              LVal (6)
                IDENTIFIER nn
                ArrayExps (6)
              MINUSExp (6)
                LVal_EXP (6)
                  LVal (6)
                    IDENTIFIER n
                    ArrayExps (6)
                IntConst (6)
                  CONSTANTINTD: 1
            BlockItems (7)
              Return_Stmt (7)
                (Exp) (7)
                  MulExp (7)
                    LVal_EXP (7)
                      LVal (7)
                        IDENTIFIER n
                        ArrayExps (7)
                    funcall (7)
                      IDENTIFIER fact
                      FuncRParams (7)
                        LVal_EXP (7)
                          LVal (7)
                            IDENTIFIER nn
                            ArrayExps (7)
  CompUnits (10)
    FuncDef (10)
      FuncFParam (10)
      Block (11)
        BlockItems (11)
          VarDecl (11)
            IDENTIFIER n
          BlockItems (12)
            Lval_Opassign_Stmt (12)
              LVal (12)
                IDENTIFIER n
                ArrayExps (12)
              IntConst (12)
                CONSTANTINTD: 4
            BlockItems (13)
              Return_Stmt (13)
                funcall (13)
                  IDENTIFIER fact
                  FuncRParams (13)
                    LVal_EXP (13)
                      LVal (13)
                        IDENTIFIER n
                        ArrayExps (13)


===========================================================
Global
ID             category       type           depictor
               
fact           Function       TYPEINTEGER    NOT NULL       
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
Formal:fact
ID             category       type           depictor
              
n              Variable       TYPEINTEGER    NOT NULL       
===========================================================
Local:fact
ID             category       type           depictor
              
               Block          BLOCKStmt      NULL           
nn             Variable       TYPEINTEGER    NULL           
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
Local:main
ID             category       type           depictor
              
n              Variable       TYPEINTEGER    NULL           
Segmentation fault (core dumped)
