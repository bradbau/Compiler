--(end of buffer or a NUL)
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("fact")
--accepting rule at line 80 ("(")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 101 ("if")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("n")
--accepting rule at line 114 (" ")
--accepting rule at line 93 ("==")
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("nn")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("nn")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 85 ("-")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("n")
--accepting rule at line 114 (" ")
--accepting rule at line 86 ("*")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("fact")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("nn")
--accepting rule at line 81 (")")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("4")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("fact")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("n")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
<int>
<id,fact>
<(>
<int>
<id,n>
<)>
<{>
<if>
<(>
<id,n>
<==>
Lval
<into>
ExpNumber:0
<)>
<{>
<return>
<intd>
ExpNumber:0
<;>
<}>
<int>
<id,nn>
<;>
<id,nn>
<=>
Lval
<id,n>
<->
Lval
<intd>
ExpNumber:0
<;>
stmt1
<return>
<(>
<id,n>
<*>
Lval
<id,fact>
<(>
<id,nn>
<)>
Lval
<)>
<;>
<}>
<int>
<id,main>
<(>
<)>
<{>
<int>
<id,n>
<;>
<id,n>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<return>
<id,fact>
<(>
<id,n>
<)>
Lval
<;>
<}>
CompUnits (1)
  FuncDef (1)
    FuncFParam (1)
    Block (2)
      BlockItems (2)
        IF_Stmt (2)
          Cond (2)
            OPEQUAL (2)
              LVal_EXP (2)
                LVal (2)
                  IDENTIFIER n
                  ArrayExps (2)
              IntConst (2)
                CONSTANTOCT: 0
          Block_Stmt (3)
            Block (3)
              BlockItems (3)
                Return_Stmt (3)
                  IntConst (3)
                    CONSTANTINTD: 1
        BlockItems (5)
          VarDecl (5)
            IDENTIFIER nn
          BlockItems (6)
            Lval_Opassign_Stmt (6)
              LVal (6)
                IDENTIFIER nn
                ArrayExps (6)
              MINUSExp (6)
                LVal_EXP (6)
                  LVal (6)
                    IDENTIFIER n
                    ArrayExps (6)
                IntConst (6)
                  CONSTANTINTD: 1
            BlockItems (7)
              Return_Stmt (7)
                (Exp) (7)
                  MulExp (7)
                    LVal_EXP (7)
                      LVal (7)
                        IDENTIFIER n
                        ArrayExps (7)
                    funcall (7)
                      IDENTIFIER fact
                      FuncRParams (7)
                        LVal_EXP (7)
                          LVal (7)
                            IDENTIFIER nn
                            ArrayExps (7)
  CompUnits (10)
    FuncDef (10)
      NOFParam (10)
      Block (11)
        BlockItems (11)
          VarDecl (11)
            IDENTIFIER n
          BlockItems (12)
            Lval_Opassign_Stmt (12)
              LVal (12)
                IDENTIFIER n
                ArrayExps (12)
              IntConst (12)
                CONSTANTINTD: 4
            BlockItems (13)
              Return_Stmt (13)
                funcall (13)
                  IDENTIFIER fact
                  FuncRParams (13)
                    LVal_EXP (13)
                      LVal (13)
                        IDENTIFIER n
                        ArrayExps (13)


===========================================================
Global
ID             category       type           depictor
               
fact           Function       TYPEINTEGER    NOT NULL       
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
Formal:fact
ID             category       type           depictor
              
n              Variable       TYPEINTEGER    NOT NULL       
===========================================================
Local:fact
ID             category       type           depictor
              
               Block          BLOCKStmt      NULL           
nn             Variable       TYPEINTEGER    NULL           
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
Local:main
ID             category       type           depictor
              
n              Variable       TYPEINTEGER    NULL           
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result

~~~~TAC~~~~~
 No  Source Position	TACCode
_______________________________________
  0  (at line   0)	CALL main

  1  (at line   1)	FUNCTION fact :
  2  (at line   1)	PARAM n
  3  (at line   2)	_t11 := 
  4  (at line   2)	_t14 := #0
  5  (at line   2)	IF _t11 = _t14 GOTO label0
  6  (at line   2)	GOTO label1
  7  (at line   2)	LABEL label0 :
  8  (at line   3)	_t15 := #1
  9  (at line   3)	RETURN _t15
 10  (at line   2)	LABEL label1 :
 11  (at line   6)	_t9 := 
 12  (at line   6)	_t10 := #1
 13  (at line   6)	_t8 := _t9 - _t10
 14  (at line   6)	 := _t8
 15  (at line   7)	_t5 := 
 16  (at line   7)	_t7 := 
 17  (at line   7)	ARG _t7
 18  (at line   7)	_t6 := CALL fact
 19  (at line   7)	_t4 := _t5 * _t6
 20  (at line   7)	_t3 := _t4
 21  (at line   7)	RETURN _t3

 22  (at line  10)	FUNCTION main :
 23  (at line  12)	_t2 := #4
 24  (at line  12)	 := _t2
 25  (at line  13)	_t1 := 
 26  (at line  13)	ARG _t1
 27  (at line  13)	_t0 := CALL fact
 28  (at line  13)	RETURN _t0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build assembly code
tac type FUNCTIONDF
tec type ASSIGN
tec type ASSIGN
tac type IFEQ
tac type GOTO
tac type LABELDF
tec type ASSIGN
tac type RETURN
tac type LABELDF
tec type ASSIGN
tec type ASSIGN
tac type SUB
compiler: ./ObjectCode/Arm.cpp:75: ARM::ARM(TACCode*, ScopeItem&): Assertion `code.dest.Type = VARIABLE' failed.
Aborted (core dumped)
