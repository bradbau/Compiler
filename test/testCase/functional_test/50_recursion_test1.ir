arg S
--(end of buffer or a NUL)
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("fact")
--accepting rule at line 80 ("(")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 101 ("if")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("n")
--accepting rule at line 114 (" ")
--accepting rule at line 93 ("==")
<int>
<id,fact>
<(>
<int>
<id,n>
<)>
<{>
<if>
<(>
<id,n>
<==>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("nn")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("nn")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<into>
ExpNumber:0
<)>
<{>
<return>
<intd>
ExpNumber:0
<;>
<}>
<int>
<id,nn>
<;>
<id,nn>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 85 ("-")
Lval
<id,n>
<->
33333333333
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("n")
--accepting rule at line 114 (" ")
--accepting rule at line 86 ("*")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<return>
<(>
<id,n>
<*>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("fact")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("nn")
--accepting rule at line 81 (")")
Lval
<id,fact>
<(>
<id,nn>
<)>
33333333333
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<)>
<;>
<}>
<int>
<id,main>
<(>
<)>
<{>
<int>
<id,n>
<;>
<id,n>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("4")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("fact")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("n")
--accepting rule at line 81 (")")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<return>
<id,fact>
<(>
<id,n>
<)>
33333333333
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
Lval
<;>
<}>
CompUnits (1)
  FuncDef (1)
    FuncFParam (1)
    Block (2)
      BlockItems (2)
        IF_Stmt (2)
          Cond (2)
            OPEQUAL (2)
              LVal_EXP (2)
                LVal (2)
                  IDENTIFIER n
                  ArrayExps (2)
              IntConst (2)
                CONSTANTOCT: 0
          Block_Stmt (3)
            Block (3)
              BlockItems (3)
                Return_Stmt (3)
                  IntConst (3)
                    CONSTANTINTD: 1
        BlockItems (5)
          VarDecl (5)
            IDENTIFIER nn
          BlockItems (6)
            Lval_Opassign_Stmt (6)
              LVal (6)
                IDENTIFIER nn
                ArrayExps (6)
              MINUSExp (6)
                LVal_EXP (6)
                  LVal (6)
                    IDENTIFIER n
                    ArrayExps (6)
                IntConst (6)
                  CONSTANTINTD: 1
            BlockItems (7)
              Return_Stmt (7)
                (Exp) (7)
                  MulExp (7)
                    LVal_EXP (7)
                      LVal (7)
                        IDENTIFIER n
                        ArrayExps (7)
                    funcall (7)
                      IDENTIFIER fact
                      FuncRParams (7)
                        LVal_EXP (7)
                          LVal (7)
                            IDENTIFIER nn
                            ArrayExps (7)
  CompUnits (10)
    FuncDef (10)
      NOFParam (10)
      Block (11)
        BlockItems (11)
          VarDecl (11)
            IDENTIFIER n
          BlockItems (12)
            Lval_Opassign_Stmt (12)
              LVal (12)
                IDENTIFIER n
                ArrayExps (12)
              IntConst (12)
                CONSTANTINTD: 4
            BlockItems (13)
              Return_Stmt (13)
                funcall (13)
                  IDENTIFIER fact
                  FuncRParams (13)
                    LVal_EXP (13)
                      LVal (13)
                        IDENTIFIER n
                        ArrayExps (13)


===========================================================
Global
ID             category       type           depictor
               
fact           Function       TYPEINTEGER    NOT NULL       
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Formal:fact
ID             category       type           depictor
              
n              Variable       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Local:fact
ID             category       type           depictor
              
               Block          BLOCKStmt      NULL           
nn             Variable       TYPEINTEGER    NULL           
===========================================================
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
===========================================================
Local:main
ID             category       type           depictor
              
n              Variable       TYPEINTEGER    NULL           
===========================================================
789
789
123
789
789
123
789
789
789
789
789
789
789
123
789
789
789
789
789
789
789
123
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
123
789
789
789
789
789
789
789
789
789
789
789
123
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
456
456
789
789
789
789
456
789
789
456
789
789
456

~~~~TAC~~~~~
 No  Source Position	TACCode
_______________________________________
  0  (at line   0)	CALL main

  1  (at line   1)	FUNCTION fact :
  2  (at line   1)	PARAM n
  3  (at line   2)	_t0 := n
  4  (at line   2)	_t3 := #0
  5  (at line   2)	IF _t0 = _t3 GOTO label0
  6  (at line   2)	GOTO label1
  7  (at line   2)	LABEL label0 :
  8  (at line   3)	_t4 := #1
  9  (at line   3)	RETURN _t4
 10  (at line   2)	LABEL label1 :
 11  (at line   6)	_t6 := n
 12  (at line   6)	_t7 := #1
 13  (at line   6)	_t5 := _t6 - _t7
 14  (at line   6)	nn := _t5
 15  (at line   7)	_t10 := n
 16  (at line   7)	_t12 := nn
 17  (at line   7)	ARG _t12
 18  (at line   7)	_t11 := CALL fact
 19  (at line   7)	_t9 := _t10 * _t11
 20  (at line   7)	_t8 := _t9
 21  (at line   7)	RETURN _t8

 22  (at line  10)	FUNCTION main :
 23  (at line  12)	_t13 := #4
 24  (at line  12)	n := _t13
 25  (at line  13)	_t15 := n
 26  (at line  13)	ARG _t15
 27  (at line  13)	_t14 := CALL fact
 28  (at line  13)	RETURN _t14


===========================================================
Global
ID             category       type           depictor
               
fact           Function       TYPEINTEGER    NOT NULL       
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Formal:fact
ID             category       type           depictor
              
n              Variable       TYPEINTEGER    NOT NULL       
scope type is wrong
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
scope type is wrong
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build assembly code
tac type FUNCTIONDF
Variable offset count+4 : 
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t0
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t3
Variable offset count+4 :_t4
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t5
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t6
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t7
Variable offset count+4 :_t8
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t9
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t10
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t11
scope type not local in functiondf
scopeprev:1
Variable offset count+4 :_t12
tec type ASSIGN
findregister: insldr rd=0,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=1,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=2,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFEQ
tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L1

tac type LABELDF
L0:

tec type ASSIGN
findregister: insldr rd=3,r1=11,r2 offset=0,op2type=1, insefft=0
tac type RETURN
tac type ARG
tac type LABELDF
L1:

tec type ASSIGN
findregister: insldr rd=4,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=5,r1=11,r2 offset=0,op2type=1, insefft=0
tac type SUB
compiler: ./ObjectCode/Arm.cpp:85: ARM::ARM(TACCode *, ScopeItem &): Assertion `code.dest.Type = VARIABLE' failed.
Aborted (core dumped)
