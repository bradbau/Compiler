--(end of buffer or a NUL)
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("ifWhile")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("3")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 101 ("if")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 93 ("==")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("5")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 103 ("while")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 93 ("==")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("2")
--accepting rule at line 81 (")")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("2")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("25")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 102 ("else")
--accepting rule at line 114 (" ")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 103 ("while")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 96 ("<")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("5")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 86 ("*")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("2")
--accepting rule at line 75 (";")
<int>
<id,ifWhile>
<(>
<)>
<{>
<int>
<id,a>
<;>
<id,a>
<=>
Lval
<into>
ExpNumber:0
<;>
stmt1
<int>
<id,b>
<;>
<id,b>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<if>
<(>
<id,a>
<==>
Lval
<intd>
ExpNumber:0
<)>
<{>
<while>
<(>
<id,b>
<==>
Lval
<intd>
ExpNumber:0
<)>
<{>
<id,b>
<=>
Lval
<id,b>
<+>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<id,b>
<=>
Lval
<id,b>
<+>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<else>
<while>
<(>
<id,a>
<<>
Lval
<intd>
ExpNumber:0
<)>
<{>
<id,b>
<=>
Lval
<id,b>
<*>
Lval
<intd>
ExpNumber:0
<;>
s--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("b")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 115 ("
")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("ifWhile")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
tmt1
<id,a>
<=>
Lval
<id,a>
<+>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<return>
<(>
<id,b>
<)>
Lval
<;>
<}>
<int>
<id,main>
<(>
<)>
<{>
<return>
<(>
<id,ifWhile>
<(>
<)>
<)>
<;>
<}>
CompUnits (1)
  FuncDef (1)
    NOFParam (1)
    Block (2)
      BlockItems (2)
        VarDecl (2)
          IDENTIFIER a
        BlockItems (3)
          Lval_Opassign_Stmt (3)
            LVal (3)
              IDENTIFIER a
              ArrayExps (3)
            IntConst (3)
              CONSTANTOCT: 0
          BlockItems (4)
            VarDecl (4)
              IDENTIFIER b
            BlockItems (5)
              Lval_Opassign_Stmt (5)
                LVal (5)
                  IDENTIFIER b
                  ArrayExps (5)
                IntConst (5)
                  CONSTANTINTD: 3
              BlockItems (6)
                IF_ELSE_Stmt (6)
                  Cond (6)
                    OPEQUAL (6)
                      LVal_EXP (6)
                        LVal (6)
                          IDENTIFIER a
                          ArrayExps (6)
                      IntConst (6)
                        CONSTANTINTD: 5
                  Block_Stmt (7)
                    Block (7)
                      BlockItems (7)
                        While_Stmt (7)
                          Cond (7)
                            OPEQUAL (7)
                              LVal_EXP (7)
                                LVal (7)
                                  IDENTIFIER b
                                  ArrayExps (7)
                              IntConst (7)
                                CONSTANTINTD: 2
                          Block_Stmt (8)
                            Block (8)
                              BlockItems (8)
                                Lval_Opassign_Stmt (8)
                                  LVal (8)
                                    IDENTIFIER b
                                    ArrayExps (8)
                                  PLUSExp (8)
                                    LVal_EXP (8)
                                      LVal (8)
                                        IDENTIFIER b
                                        ArrayExps (8)
                                    IntConst (8)
                                      CONSTANTINTD: 2
                        BlockItems (10)
                          Lval_Opassign_Stmt (10)
                            LVal (10)
                              IDENTIFIER b
                              ArrayExps (10)
                            PLUSExp (10)
                              LVal_EXP (10)
                                LVal (10)
                                  IDENTIFIER b
                                  ArrayExps (10)
                              IntConst (10)
                                CONSTANTINTD: 25
                  While_Stmt (13)
                    Cond (13)
                      OPLIGHT (13)
                        LVal_EXP (13)
                          LVal (13)
                            IDENTIFIER a
                            ArrayExps (13)
                        IntConst (13)
                          CONSTANTINTD: 5
                    Block_Stmt (14)
                      Block (14)
                        BlockItems (14)
                          Lval_Opassign_Stmt (14)
                            LVal (14)
                              IDENTIFIER b
                              ArrayExps (14)
                            MulExp (14)
                              LVal_EXP (14)
                                LVal (14)
                                  IDENTIFIER b
                                  ArrayExps (14)
                              IntConst (14)
                                CONSTANTINTD: 2
                          BlockItems (15)
                            Lval_Opassign_Stmt (15)
                              LVal (15)
                                IDENTIFIER a
                                ArrayExps (15)
                              PLUSExp (15)
                                LVal_EXP (15)
                                  LVal (15)
                                    IDENTIFIER a
                                    ArrayExps (15)
                                IntConst (15)
                                  CONSTANTINTD: 1
                BlockItems (17)
                  Return_Stmt (17)
                    (Exp) (17)
                      LVal_EXP (17)
                        LVal (17)
                          IDENTIFIER b
                          ArrayExps (17)
  CompUnits (21)
    FuncDef (21)
      NOFParam (21)
      Block (22)
        BlockItems (22)
          Return_Stmt (22)
            (Exp) (22)
              funcall (22)
                IDENTIFIER ifWhile


===========================================================
Global
ID             category       type           depictor
               
ifWhile        Function       TYPEINTEGER    NOT NULL       
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
Formal:ifWhile
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
Local:ifWhile
ID             category       type           depictor
              
a              Variable       TYPEINTEGER    NULL           
b              Variable       TYPEINTEGER    NULL           
               Block          BLOCKStmt      NOT NULL       
               Block          BLOCKStmt      NULL           
===========================================================
Local:block
ID             category       type           depictor
              
               Block          BLOCKStmt      NULL           
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NULL           
===========================================================
Local:main
ID             category       type           depictor
              
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result

~~~~TAC~~~~~
 No  Source Position	TACCode
_______________________________________
  0  (at line   0)	CALL main

  1  (at line   1)	FUNCTION ifWhile :
  2  (at line   3)	_t29 := #0
  3  (at line   3)	 := _t29
  4  (at line   5)	_t28 := #3
  5  (at line   5)	 := _t28
  6  (at line   6)	_t4 := 
  7  (at line   6)	_t7 := #5
  8  (at line   6)	IF _t4 = _t7 GOTO label0
  9  (at line   6)	GOTO label1
 10  (at line   6)	LABEL label0 :
 11  (at line   7)	LABEL label2 :
 12  (at line   7)	_t11 := 
 13  (at line   7)	_t14 := #2
 14  (at line   7)	IF _t11 = _t14 GOTO label3
 15  (at line   7)	GOTO label4
 16  (at line   7)	LABEL label3 :
 17  (at line   8)	_t16 := 
 18  (at line   8)	_t17 := #2
 19  (at line   8)	_t15 := _t16 + _t17
 20  (at line   8)	 := _t15
 21  (at line   7)	GOTO label2
 22  (at line   7)	LABEL label4 :
 23  (at line  10)	_t9 := 
 24  (at line  10)	_t10 := #25
 25  (at line  10)	_t8 := _t9 + _t10
 26  (at line  10)	 := _t8
 27  (at line   6)	GOTO label5
 28  (at line   6)	LABEL label1 :
 29  (at line  13)	LABEL label6 :
 30  (at line  13)	_t18 := 
 31  (at line  13)	_t21 := #5
 32  (at line  13)	IF _t18 < _t21 GOTO label7
 33  (at line  13)	GOTO label8
 34  (at line  13)	LABEL label7 :
 35  (at line  14)	_t26 := 
 36  (at line  14)	_t27 := #2
 37  (at line  14)	_t25 := _t26 * _t27
 38  (at line  14)	 := _t25
 39  (at line  15)	_t23 := 
 40  (at line  15)	_t24 := #1
 41  (at line  15)	_t22 := _t23 + _t24
 42  (at line  15)	 := _t22
 43  (at line  13)	GOTO label6
 44  (at line  13)	LABEL label8 :
 45  (at line   6)	LABEL label5 :
 46  (at line  17)	_t3 := 
 47  (at line  17)	_t2 := _t3
 48  (at line  17)	RETURN _t2

 49  (at line  21)	FUNCTION main :
 50  (at line  22)	_t1 := CALL ifWhile
 51  (at line  22)	_t0 := _t1
 52  (at line  22)	RETURN _t0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build assembly code
tac type FUNCTIONDF
tec type ASSIGN
findregister: insldr rd=0,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
tec type ASSIGN
findregister: insldr rd=1,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
tec type ASSIGN
findregister: insldr rd=2,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=3,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFEQ
tac type GOTO
tac type LABELDF
tac type LABELDF
tec type ASSIGN
findregister: insldr rd=4,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=5,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFEQ
tac type GOTO
tac type LABELDF
tec type ASSIGN
findregister: insldr rd=6,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=8,r1=11,r2 offset=0,op2type=1, insefft=0
tac type ADD
findregister: insldr rd=9,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
tac type GOTO
tac type LABELDF
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type ADD
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type GOTO
tac type LABELDF
tac type LABELDF
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFLT
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type GOTO
tac type LABELDF
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type MUL
compiler: ./ObjectCode/Arm.cpp:89: ARM::ARM(TACCode*, ScopeItem&): Assertion `code.dest.Type = VARIABLE' failed.
Aborted (core dumped)
