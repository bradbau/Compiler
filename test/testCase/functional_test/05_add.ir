--(end of buffer or a NUL)
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("a")
--accepting rule at line 89 ("=")
--accepting rule at line 109 ("10")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("b")
--accepting rule at line 89 ("=")
--accepting rule at line 109 ("20")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("c")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("c")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("c")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
<int>
<id,a>
<;>
<int>
<id,b>
<;>
<int>
<id,main>
<(>
<)>
<{>
<id,a>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,b>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<int>
<id,c>
<;>
<id,c>
<=>
Lval
<id,a>
<+>
Lval
<id,b>
<;>
Lval
stmt1
<return>
<id,c>
<;>
Lval
<}>
CompUnits (1)
  VarDecl (1)
    IDENTIFIER a
  CompUnits (2)
    VarDecl (2)
      IDENTIFIER b
    CompUnits (4)
      FuncDef (4)
        NOFParam (4)
        Block (5)
          BlockItems (5)
            Lval_Opassign_Stmt (5)
              LVal (5)
                IDENTIFIER a
                ArrayExps (5)
              IntConst (5)
                CONSTANTINTD: 10
            BlockItems (6)
              Lval_Opassign_Stmt (6)
                LVal (6)
                  IDENTIFIER b
                  ArrayExps (6)
                IntConst (6)
                  CONSTANTINTD: 20
              BlockItems (7)
                VarDecl (7)
                  IDENTIFIER c
                BlockItems (8)
                  Lval_Opassign_Stmt (8)
                    LVal (8)
                      IDENTIFIER c
                      ArrayExps (8)
                    PLUSExp (8)
                      LVal_EXP (8)
                        LVal (8)
                          IDENTIFIER a
                          ArrayExps (8)
                      LVal_EXP (8)
                        LVal (8)
                          IDENTIFIER b
                          ArrayExps (8)
                  BlockItems (9)
                    Return_Stmt (9)
                      LVal_EXP (9)
                        LVal (9)
                          IDENTIFIER c
                          ArrayExps (9)


===========================================================
Global
ID             category       type           depictor
               
a              Variable       TYPEINTEGER    NULL           
b              Variable       TYPEINTEGER    NULL           
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
Local:main
ID             category       type           depictor
              
c              Variable       TYPEINTEGER    NULL           

~~~~TAC~~~~~
 No  Source Position	TACCode
_______________________________________
  0  (at line   0)	CALL main

  1  (at line   4)	FUNCTION main :
  2  (at line   5)	_t5 := #10
  3  (at line   5)	 := _t5
  4  (at line   6)	_t4 := #20
  5  (at line   6)	 := _t4
  6  (at line   8)	_t2 := 
  7  (at line   8)	_t3 := 
  8  (at line   8)	_t1 := _t2 + _t3
  9  (at line   8)	 := _t1
 10  (at line   9)	_t0 := 
 11  (at line   9)	RETURN _t0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build assembly code
tac type FUNCTIONDF
tec type ASSIGN
findregister: insldr rd=0,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=1,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=2,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
tec type ASSIGN
findregister: insldr rd=3,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=4,r1=11,r2 offset=0,op2type=1, insefft=0
tac type ADD
findregister: insldr rd=5,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
tec type ASSIGN
findregister: insldr rd=6,r1=11,r2 offset=0,op2type=1, insefft=0
tac type RETURN
tac build complete
push instruction
op2type==1
op2type==1
op2type==1
op2type==1
op2type==1
op2type==1
op2type==1
#armv7 assembly code
main:
PUSH {fp}
ADD  fp, sp, #0
SUB fp, fp, #64
LDRIA r0, [fp, 0x0]
MOV r0, 10
LDRIA r1, [fp, 0x0]
ADD  r1, r0, #0
LDRIA r2, [fp, 0x0]
MOV r2, 20
ADD  r1, r2, #0
LDRIA r3, [fp, 0x0]
ADD  r3, r1, #0
LDRIA r4, [fp, 0x0]
ADD  r4, r1, #0
LDRIA r5, [fp, 0x0]
ADD  r5, r3, r4
ADD  r1, r5, #0
LDRIA r6, [fp, 0x0]
ADD  r6, r8, #0
ADD  r0, r6, #0
ADD  sp, fp, #0
POP {fp}
BX lr

