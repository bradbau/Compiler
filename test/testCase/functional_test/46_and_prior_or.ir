--(end of buffer or a NUL)
--accepting rule at line 74 ("// And is prior to or
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("c")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("d")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("3")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("8")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("c")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 85 ("-")
--accepting rule at line 109 ("4")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("d")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("15")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("t")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 101 ("if")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("d")
--accepting rule at line 114 (" ")
--accepting rule at line 88 ("%")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 85 ("-")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 94 ("!=")
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 114 (" ")
--accepting rule at line 90 ("&&")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 95 (">")
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 114 (" ")
--accepting rule at line 91 ("||")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("d")
--accepting rule at line 114 (" ")
--accepting rule at line 88 ("%")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("3")
--accepting rule at line 114 (" ")
--accepting rule at line 93 ("==")
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 114 (" ")
--accepting rule at line 90 ("&&")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("c")
--accepting rule at line 114 (" ")
--accepting rule at line 95 (">")
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
<int>
<id,main>
<(>
<)>
<{>
<int>
<id,a>
<;>
<int>
<id,b>
<;>
<int>
<id,c>
<;>
<int>
<id,d>
<;>
<id,a>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,b>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,c>
<=>
Lval
<->
<intd>
ExpNumber:0
<;>
stmt1
<id,d>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<int>
<id,t>
<;>
<if>
<(>
<id,d>
<%>
Lval
<(>
<id,b>
<->
Lval
<id,a>
<)>
Lval
<!=>
<into>
ExpNumber:0
<&&>
<id,a>
<>>
Lval
<into>
ExpNumber:0
<||>
<id,d>
<%>
Lval
<intd>
ExpNumber:0
<==>
<into>
ExpNumber:0
<&&>
<id,c>
<>>
Lval
<into--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("t")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("d")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("c")
--accepting rule at line 114 (" ")
--accepting rule at line 85 ("-")
--accepting rule at line 114 (" ")
--accepting rule at line 85 ("-")
--accepting rule at line 112 ("b")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("putint")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("t")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
>
ExpNumber:0
<)>
<{>
<id,t>
<=>
Lval
<id,d>
<+>
Lval
<id,c>
<->
Lval
<->
<id,b>
<;>
Lval
stmt1
<id,putint>
<(>
<id,t>
<)>
Lval
<;>
<}>
<return>
<into>
ExpNumber:0
<;>
<}>
CompUnits (2)
  FuncDef (2)
    NOFParam (2)
    Block (3)
      BlockItems (3)
        VarDecl (3)
          IDENTIFIER a
        BlockItems (4)
          VarDecl (4)
            IDENTIFIER b
          BlockItems (5)
            VarDecl (5)
              IDENTIFIER c
            BlockItems (6)
              VarDecl (6)
                IDENTIFIER d
              BlockItems (7)
                Lval_Opassign_Stmt (7)
                  LVal (7)
                    IDENTIFIER a
                    ArrayExps (7)
                  IntConst (7)
                    CONSTANTINTD: 3
                BlockItems (8)
                  Lval_Opassign_Stmt (8)
                    LVal (8)
                      IDENTIFIER b
                      ArrayExps (8)
                    IntConst (8)
                      CONSTANTINTD: 8
                  BlockItems (9)
                    Lval_Opassign_Stmt (9)
                      LVal (9)
                        IDENTIFIER c
                        ArrayExps (9)
                      OPMINUS_Exp (9)
                        IntConst (9)
                          CONSTANTINTD: 4
                    BlockItems (10)
                      Lval_Opassign_Stmt (10)
                        LVal (10)
                          IDENTIFIER d
                          ArrayExps (10)
                        IntConst (10)
                          CONSTANTINTD: 15
                      BlockItems (11)
                        VarDecl (11)
                          IDENTIFIER t
                        BlockItems (12)
                          IF_Stmt (12)
                            Cond_Or (12)
                              Cond_And (12)
                                Cond (12)
                                  OPNOTEQUAL (12)
                                    MODExp (12)
                                      LVal_EXP (12)
                                        LVal (12)
                                          IDENTIFIER d
                                          ArrayExps (12)
                                      (Exp) (12)
                                        MINUSExp (12)
                                          LVal_EXP (12)
                                            LVal (12)
                                              IDENTIFIER b
                                              ArrayExps (12)
                                          LVal_EXP (12)
                                            LVal (12)
                                              IDENTIFIER a
                                              ArrayExps (12)
                                    IntConst (12)
                                      CONSTANTOCT: 0
                                Cond (12)
                                  OPGREAT (12)
                                    LVal_EXP (12)
                                      LVal (12)
                                        IDENTIFIER a
                                        ArrayExps (12)
                                    IntConst (12)
                                      CONSTANTOCT: 0
                              Cond_And (12)
                                Cond (12)
                                  OPEQUAL (12)
                                    MODExp (12)
                                      LVal_EXP (12)
                                        LVal (12)
                                          IDENTIFIER d
                                          ArrayExps (12)
                                      IntConst (12)
                                        CONSTANTINTD: 3
                                    IntConst (12)
                                      CONSTANTOCT: 0
                                Cond (12)
                                  OPGREAT (12)
                                    LVal_EXP (12)
                                      LVal (12)
                                        IDENTIFIER c
                                        ArrayExps (12)
                                    IntConst (12)
                                      CONSTANTOCT: 0
                            Block_Stmt (13)
                              Block (13)
                                BlockItems (13)
                                  Lval_Opassign_Stmt (13)
                                    LVal (13)
                                      IDENTIFIER t
                                      ArrayExps (13)
                                    MINUSExp (13)
                                      PLUSExp (13)
                                        LVal_EXP (13)
                                          LVal (13)
                                            IDENTIFIER d
                                            ArrayExps (13)
                                        LVal_EXP (13)
                                          LVal (13)
                                            IDENTIFIER c
                                            ArrayExps (13)
                                      OPMINUS_Exp (13)
                                        LVal_EXP (13)
                                          LVal (13)
                                            IDENTIFIER b
                                            ArrayExps (13)
                                  BlockItems (14)
                                    Exp_Stmt (14)
                                      funcall (14)
                                        IDENTIFIER putint
                                        FuncRParams (14)
                                          LVal_EXP (14)
                                            LVal (14)
                                              IDENTIFIER t
                                              ArrayExps (14)
                          BlockItems (16)
                            Return_Stmt (16)
                              IntConst (16)
                                CONSTANTOCT: 0


===========================================================
Global
ID             category       type           depictor
               
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
Local:main
ID             category       type           depictor
              
a              Variable       TYPEINTEGER    NULL           
b              Variable       TYPEINTEGER    NULL           
c              Variable       TYPEINTEGER    NULL           
d              Variable       TYPEINTEGER    NULL           
t              Variable       TYPEINTEGER    NULL           
               Block          BLOCKStmt      NULL           
TraverseScopeStack no result

~~~~TAC~~~~~
 No  Source Position	TACCode
_______________________________________
  0  (at line   0)	CALL main

  1  (at line   2)	FUNCTION main :
  2  (at line   7)	_t35 := #3
  3  (at line   7)	 := _t35
  4  (at line   8)	_t34 := #8
  5  (at line   8)	 := _t34
  6  (at line   9)	_t33 := #4
  7  (at line   9)	_t32 := #0 - _t33
  8  (at line   9)	 := _t32
  9  (at line  10)	_t31 := #15
 10  (at line  10)	 := _t31
 11  (at line  12)	_t4 := 
 12  (at line  12)	_t7 := 
 13  (at line  12)	_t8 := 
 14  (at line  12)	_t6 := _t7 - _t8
 15  (at line  12)	_t5 := _t6
 16  (at line  12)	_t1 := _t4 % _t5
 17  (at line  12)	_t9 := #0
 18  (at line  12)	IF _t1 != _t9 GOTO label3
 19  (at line  12)	GOTO label2
 20  (at line  12)	LABEL label3 :
 21  (at line  12)	_t10 := 
 22  (at line  12)	_t13 := #0
 23  (at line  12)	IF _t10 > _t13 GOTO label0
 24  (at line  12)	GOTO label2
 25  (at line  12)	LABEL label2 :
 26  (at line  12)	_t17 := 
 27  (at line  12)	_t18 := #3
 28  (at line  12)	_t14 := _t17 % _t18
 29  (at line  12)	_t19 := #0
 30  (at line  12)	IF _t14 = _t19 GOTO label4
 31  (at line  12)	GOTO label1
 32  (at line  12)	LABEL label4 :
 33  (at line  12)	_t20 := 
 34  (at line  12)	_t23 := #0
 35  (at line  12)	IF _t20 > _t23 GOTO label0
 36  (at line  12)	GOTO label1
 37  (at line  12)	LABEL label0 :
 38  (at line  13)	_t28 := 
 39  (at line  13)	_t29 := 
 40  (at line  13)	_t26 := _t28 + _t29
 41  (at line  13)	_t30 := 
 42  (at line  13)	_t27 := #0 - _t30
 43  (at line  13)	_t25 := _t26 - _t27
 44  (at line  13)	 := _t25
 45  (at line  14)	_t24 := 
 46  (at line  14)	ARG _t24
 47  (at line  14)	CALL 
 48  (at line  12)	LABEL label1 :
 49  (at line  16)	_t0 := #0
 50  (at line  16)	RETURN _t0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build assembly code
tac type FUNCTIONDF
tec type ASSIGN
findregister: insldr rd=0,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=1,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=2,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
tec type ASSIGN
findregister: insldr rd=3,r1=11,r2 offset=0,op2type=1, insefft=0
tac type SUB
compiler: ./ObjectCode/Arm.cpp:75: ARM::ARM(TACCode*, ScopeItem&): Assertion `code.dest.Type = VARIABLE' failed.
Aborted (core dumped)
