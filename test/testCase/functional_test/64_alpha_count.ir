arg S
--(end of buffer or a NUL)
--accepting rule at line 74 ("// Count how many alpha in a string
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("string")
--accepting rule at line 82 ("[")
--accepting rule at line 109 ("500")
--accepting rule at line 83 ("]")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("temp")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("count")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("count")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
<int>
<id,main>
<(>
<)>
<{>
<int>
<id,string>
<[>
<intd>
ExpNumber:0
<]>
<;>
<int>
<id,temp>
<;>
<int>
<id,i>
<;>
<int>
<id,count>
<;>
<id,count>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<into>
ExpNumber:0
<;>
stmt1
<id,i>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("temp")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<into>
ExpNumber:0
<;>
stmt1
<id,temp>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 103 ("while")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("temp")
--accepting rule at line 114 (" ")
--accepting rule at line 94 ("!=")
Lval
<into>
ExpNumber:0
<;>
stmt1
<while>
<(>
<id,temp>
<!=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("10")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("temp")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<intd>
ExpNumber:0
<)>
<{>
<id,temp>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("getch")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 101 ("if")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("temp")
--accepting rule at line 114 (" ")
--accepting rule at line 95 (">")
Lval
<id,getch>
<(>
<)>
<;>
stmt1
<if>
<(>
<id,temp>
<>>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("40")
--accepting rule at line 114 (" ")
--accepting rule at line 90 ("&&")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("temp")
--accepting rule at line 114 (" ")
--accepting rule at line 96 ("<")
Lval
<intd>
ExpNumber:0
<&&>
<id,temp>
<<>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("91")
--accepting rule at line 114 (" ")
--accepting rule at line 91 ("||")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("temp")
--accepting rule at line 114 (" ")
--accepting rule at line 95 (">")
Lval
<intd>
ExpNumber:0
<||>
<id,temp>
<>>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("96")
--accepting rule at line 114 (" ")
--accepting rule at line 90 ("&&")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("temp")
--accepting rule at line 114 (" ")
--accepting rule at line 96 ("<")
Lval
<intd>
ExpNumber:0
<&&>
<id,temp>
<<>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("123")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("count")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<intd>
ExpNumber:0
<)>
<{>
<id,count>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("count")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
Lval
<id,count>
<+>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<id,i>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
Lval
<id,i>
<+>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("putint")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("count")
--accepting rule at line 81 (")")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<id,putint>
<(>
<id,count>
<)>
33333333333
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
Lval
<;>
<return>
<into>
ExpNumber:0
<;>
<}>
CompUnits (2)
  FuncDef (2)
    NOFParam (2)
    Block (3)
      BlockItems (3)
        VarDecl (3)
          ArrayDec: demmision=0
            IDENTIFIER string
        BlockItems (4)
          VarDecl (4)
            IDENTIFIER temp
          BlockItems (5)
            VarDecl (5)
              IDENTIFIER i
            BlockItems (6)
              VarDecl (6)
                IDENTIFIER count
              BlockItems (7)
                Lval_Opassign_Stmt (7)
                  LVal (7)
                    IDENTIFIER count
                    ArrayExps (7)
                  IntConst (7)
                    CONSTANTOCT: 0
                BlockItems (8)
                  Lval_Opassign_Stmt (8)
                    LVal (8)
                      IDENTIFIER i
                      ArrayExps (8)
                    IntConst (8)
                      CONSTANTOCT: 0
                  BlockItems (9)
                    Lval_Opassign_Stmt (9)
                      LVal (9)
                        IDENTIFIER temp
                        ArrayExps (9)
                      IntConst (9)
                        CONSTANTOCT: 0
                    BlockItems (10)
                      While_Stmt (10)
                        Cond (10)
                          OPNOTEQUAL (10)
                            LVal_EXP (10)
                              LVal (10)
                                IDENTIFIER temp
                                ArrayExps (10)
                            IntConst (10)
                              CONSTANTINTD: 10
                        Block_Stmt (11)
                          Block (11)
                            BlockItems (11)
                              Lval_Opassign_Stmt (11)
                                LVal (11)
                                  IDENTIFIER temp
                                  ArrayExps (11)
                                funcall (11)
                                  IDENTIFIER getch
                              BlockItems (12)
                                IF_Stmt (12)
                                  Cond_Or (12)
                                    Cond_And (12)
                                      Cond (12)
                                        OPGREAT (12)
                                          LVal_EXP (12)
                                            LVal (12)
                                              IDENTIFIER temp
                                              ArrayExps (12)
                                          IntConst (12)
                                            CONSTANTINTD: 40
                                      Cond (12)
                                        OPLIGHT (12)
                                          LVal_EXP (12)
                                            LVal (12)
                                              IDENTIFIER temp
                                              ArrayExps (12)
                                          IntConst (12)
                                            CONSTANTINTD: 91
                                    Cond_And (12)
                                      Cond (12)
                                        OPGREAT (12)
                                          LVal_EXP (12)
                                            LVal (12)
                                              IDENTIFIER temp
                                              ArrayExps (12)
                                          IntConst (12)
                                            CONSTANTINTD: 96
                                      Cond (12)
                                        OPLIGHT (12)
                                          LVal_EXP (12)
                                            LVal (12)
                                              IDENTIFIER temp
                                              ArrayExps (12)
                                          IntConst (12)
                                            CONSTANTINTD: 123
                                  Block_Stmt (13)
                                    Block (13)
                                      BlockItems (13)
                                        Lval_Opassign_Stmt (13)
                                          LVal (13)
                                            IDENTIFIER count
                                            ArrayExps (13)
                                          PLUSExp (13)
                                            LVal_EXP (13)
                                              LVal (13)
                                                IDENTIFIER count
                                                ArrayExps (13)
                                            IntConst (13)
                                              CONSTANTINTD: 1
                                BlockItems (15)
                                  Lval_Opassign_Stmt (15)
                                    LVal (15)
                                      IDENTIFIER i
                                      ArrayExps (15)
                                    PLUSExp (15)
                                      LVal_EXP (15)
                                        LVal (15)
                                          IDENTIFIER i
                                          ArrayExps (15)
                                      IntConst (15)
                                        CONSTANTINTD: 1
                      BlockItems (17)
                        Exp_Stmt (17)
                          funcall (17)
                            IDENTIFIER putint
                            FuncRParams (17)
                              LVal_EXP (17)
                                LVal (17)
                                  IDENTIFIER count
                                  ArrayExps (17)
                        BlockItems (18)
                          Return_Stmt (18)
                            IntConst (18)
                              CONSTANTOCT: 0


===========================================================
Global
ID             category       type           depictor
               
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
===========================================================
Local:main
ID             category       type           depictor
              
string         Array          TYPEINTEGER    ----------> dim=1
temp           Variable       TYPEINTEGER    NULL           
i              Variable       TYPEINTEGER    NULL           
count          Variable       TYPEINTEGER    NULL           
               Block          BLOCKStmt      NOT NULL       
===========================================================
===========================================================
Local:block
ID             category       type           depictor
              
               Block          BLOCKStmt      NULL           
===========================================================
789
789
789
456
789
789
789
456
789
789
789
456
789
789
789
789
456
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
TraverseScopeStack no result
789
789
789
789
789
789
456
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
TraverseScopeStack no result
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
456

~~~~TAC~~~~~
 No  Source Position	TACCode
_______________________________________
  0  (at line   0)	CALL main

  1  (at line   2)	FUNCTION main :
  2  (at line   7)	_t0 := #0
  3  (at line   7)	count := _t0
  4  (at line   8)	_t1 := #0
  5  (at line   8)	i := _t1
  6  (at line   9)	_t2 := #0
  7  (at line   9)	temp := _t2
  8  (at line  10)	LABEL label0 :
  9  (at line  10)	_t3 := temp
 10  (at line  10)	_t6 := #10
 11  (at line  10)	IF _t3 != _t6 GOTO label1
 12  (at line  10)	GOTO label2
 13  (at line  10)	LABEL label1 :
 14  (at line  11)	_t7 := CALL 
 15  (at line  11)	temp := _t7
 16  (at line  12)	_t8 := temp
 17  (at line  12)	_t11 := #40
 18  (at line  12)	IF _t8 > _t11 GOTO label6
 19  (at line  12)	GOTO label5
 20  (at line  12)	LABEL label6 :
 21  (at line  12)	_t12 := temp
 22  (at line  12)	_t15 := #91
 23  (at line  12)	IF _t12 < _t15 GOTO label3
 24  (at line  12)	GOTO label5
 25  (at line  12)	LABEL label5 :
 26  (at line  12)	_t16 := temp
 27  (at line  12)	_t19 := #96
 28  (at line  12)	IF _t16 > _t19 GOTO label7
 29  (at line  12)	GOTO label4
 30  (at line  12)	LABEL label7 :
 31  (at line  12)	_t20 := temp
 32  (at line  12)	_t23 := #123
 33  (at line  12)	IF _t20 < _t23 GOTO label3
 34  (at line  12)	GOTO label4
 35  (at line  12)	LABEL label3 :
 36  (at line  13)	_t25 := count
 37  (at line  13)	_t26 := #1
 38  (at line  13)	_t24 := _t25 + _t26
 39  (at line  13)	count := _t24
 40  (at line  12)	LABEL label4 :
 41  (at line  15)	_t28 := i
 42  (at line  15)	_t29 := #1
 43  (at line  15)	_t27 := _t28 + _t29
 44  (at line  15)	i := _t27
 45  (at line  10)	GOTO label0
 46  (at line  10)	LABEL label2 :
 47  (at line  17)	_t30 := count
 48  (at line  17)	ARG _t30
 49  (at line  17)	CALL 
 50  (at line  18)	_t31 := #0
 51  (at line  18)	RETURN _t31


===========================================================
Global
ID             category       type           depictor
               
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
scope type is wrong
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build assembly code
tac type FUNCTIONDF
Variable offset count+4 :string
Variable offset count+4 :string
Variable offset count+4 :string
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t0
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t1
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t2
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t3
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t6
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t30
Variable offset count+4 :_t31
tec type ASSIGN
findregister: insldr rd=0,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=1,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=2,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=3,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=4,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=5,r1=11,r2 offset=0,op2type=1, insefft=0
tac type LABELDF
L0:

tec type ASSIGN
findregister: insldr rd=6,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=8,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFNEQ
tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L2

tac type LABELDF
L1:

tac type CALLASSIGN
findregister: insldr rd=9,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFGT
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
ControlInstruction String: ControlInstruction tostring
INS B tostring
BGT L6

tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L5

tac type LABELDF
L6:

tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFLT
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L5

tac type LABELDF
L5:

tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFGT
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
ControlInstruction String: ControlInstruction tostring
INS B tostring
BGT L7

tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L4

tac type LABELDF
L7:

tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFLT
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L4

tac type LABELDF
L3:

tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type ADD
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type LABELDF
L4:

tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type ADD
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L0

tac type LABELDF
L2:

tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type ARG
tac type CALL
Segmentation fault (core dumped)
