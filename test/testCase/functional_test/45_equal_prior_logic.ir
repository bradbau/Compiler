<int>
<id,main>
<(>
<)>
<{>
<int>
<id,a>
<;>
<int>
<id,b>
<;>
<int>
<id,c>
<;>
<int>
<id,d>
<;>
<id,a>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,b>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,c>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,d>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<int>
<id,t>
<;>
<if>
<(>
<id,b>
<+>
Lval
<id,c>
<==>
Lval
<id,a>
<&&>
Lval
<id,d>
<!=>
Lval
<id,a>
</>
Lval
<intd>
ExpNumber:0
<)>
<{>
<id,t>
<=>
Lval
<id,b>
<+>
Lval
<id,c>
</>
Lval
<id,d>
<*>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,putint>
<(>
<id,t>
<)>
Lval
<;>
<}>
<if>
<(>
<id,c>
<<>
Lval
<into>
ExpNumber:0
<||>
<id,a>
<->
Lval
<id,c>
<==>
Lval
<id,b>
<&&>
Lval
<id,a>
<!=>
Lval
<id,d>
<*>
Lval
<intd>
ExpNumber:0
<)>
<{>
<id,t>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,putint>
<(>
<id,t>
<)>
Lval
<;>
<}>
<return>
<into>
ExpNumber:0
<;>
<}>
CompUnits (2)
  FuncDef (2)
    NOFParam (2)
    Block (3)
      BlockItems (3)
        VarDecl (3)
          IDENTIFIER a
        BlockItems (4)
          VarDecl (4)
            IDENTIFIER b
          BlockItems (5)
            VarDecl (5)
              IDENTIFIER c
            BlockItems (6)
              VarDecl (6)
                IDENTIFIER d
              BlockItems (7)
                Lval_Opassign_Stmt (7)
                  LVal (7)
                    IDENTIFIER a
                    ArrayExps (7)
                  IntConst (7)
                    CONSTANTINTD: 10
                BlockItems (8)
                  Lval_Opassign_Stmt (8)
                    LVal (8)
                      IDENTIFIER b
                      ArrayExps (8)
                    IntConst (8)
                      CONSTANTINTD: 6
                  BlockItems (9)
                    Lval_Opassign_Stmt (9)
                      LVal (9)
                        IDENTIFIER c
                        ArrayExps (9)
                      IntConst (9)
                        CONSTANTINTD: 4
                    BlockItems (10)
                      Lval_Opassign_Stmt (10)
                        LVal (10)
                          IDENTIFIER d
                          ArrayExps (10)
                        IntConst (10)
                          CONSTANTINTD: 5
                      BlockItems (11)
                        VarDecl (11)
                          IDENTIFIER t
                        BlockItems (12)
                          IF_Stmt (12)
                            Cond_And (12)
                              Cond (12)
                                OPEQUAL (12)
                                  PLUSExp (12)
                                    LVal_EXP (12)
                                      LVal (12)
                                        IDENTIFIER b
                                        ArrayExps (12)
                                    LVal_EXP (12)
                                      LVal (12)
                                        IDENTIFIER c
                                        ArrayExps (12)
                                  LVal_EXP (12)
                                    LVal (12)
                                      IDENTIFIER a
                                      ArrayExps (12)
                              Cond (12)
                                OPNOTEQUAL (12)
                                  LVal_EXP (12)
                                    LVal (12)
                                      IDENTIFIER d
                                      ArrayExps (12)
                                  DIVIDEExp (12)
                                    LVal_EXP (12)
                                      LVal (12)
                                        IDENTIFIER a
                                        ArrayExps (12)
                                    IntConst (12)
                                      CONSTANTINTD: 2
                            Block_Stmt (13)
                              Block (13)
                                BlockItems (13)
                                  Lval_Opassign_Stmt (13)
                                    LVal (13)
                                      IDENTIFIER t
                                      ArrayExps (13)
                                    PLUSExp (13)
                                      LVal_EXP (13)
                                        LVal (13)
                                          IDENTIFIER b
                                          ArrayExps (13)
                                      MulExp (13)
                                        DIVIDEExp (13)
                                          LVal_EXP (13)
                                            LVal (13)
                                              IDENTIFIER c
                                              ArrayExps (13)
                                          LVal_EXP (13)
                                            LVal (13)
                                              IDENTIFIER d
                                              ArrayExps (13)
                                        IntConst (13)
                                          CONSTANTINTD: 2
                                  BlockItems (14)
                                    Exp_Stmt (14)
                                      funcall (14)
                                        IDENTIFIER putint
                                        FuncRParams (14)
                                          LVal_EXP (14)
                                            LVal (14)
                                              IDENTIFIER t
                                              ArrayExps (14)
                          BlockItems (16)
                            IF_Stmt (16)
                              Cond_Or (16)
                                Cond (16)
                                  OPLIGHT (16)
                                    LVal_EXP (16)
                                      LVal (16)
                                        IDENTIFIER c
                                        ArrayExps (16)
                                    IntConst (16)
                                      CONSTANTOCT: 0
                                Cond_And (16)
                                  Cond (16)
                                    OPEQUAL (16)
                                      MINUSExp (16)
                                        LVal_EXP (16)
                                          LVal (16)
                                            IDENTIFIER a
                                            ArrayExps (16)
                                        LVal_EXP (16)
                                          LVal (16)
                                            IDENTIFIER c
                                            ArrayExps (16)
                                      LVal_EXP (16)
                                        LVal (16)
                                          IDENTIFIER b
                                          ArrayExps (16)
                                  Cond (16)
                                    OPNOTEQUAL (16)
                                      LVal_EXP (16)
                                        LVal (16)
                                          IDENTIFIER a
                                          ArrayExps (16)
                                      MulExp (16)
                                        LVal_EXP (16)
                                          LVal (16)
                                            IDENTIFIER d
                                            ArrayExps (16)
                                        IntConst (16)
                                          CONSTANTINTD: 2
                              Block_Stmt (17)
                                Block (17)
                                  BlockItems (17)
                                    Lval_Opassign_Stmt (17)
                                      LVal (17)
                                        IDENTIFIER t
                                        ArrayExps (17)
                                      IntConst (17)
                                        CONSTANTINTD: 1
                                    BlockItems (18)
                                      Exp_Stmt (18)
                                        funcall (18)
                                          IDENTIFIER putint
                                          FuncRParams (18)
                                            LVal_EXP (18)
                                              LVal (18)
                                                IDENTIFIER t
                                                ArrayExps (18)
                            BlockItems (20)
                              Return_Stmt (20)
                                IntConst (20)
                                  CONSTANTOCT: 0


===========================================================
Global
ID             category       type           depictor
               
putf           Function       void           NULL           
putarray       Function       void           NOT NULL       
putchar        Function       void           NOT NULL       
putint         Function       void           NOT NULL       
getarray       Function       int            NOT NULL       
getchar        Function       int            NOT NULL       
getint         Function       int            NOT NULL       
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Formal:putarray
ID             category       type           depictor
              
a              Array          int            ----------> dim=1
a              Variable       int            NULL           
===========================================================
===========================================================
Local:putarray
ID             category       type           depictor
              
scope type is wrong
               Variable                      NULL           
===========================================================
===========================================================
Formal:putchar
ID             category       type           depictor
              
a              Variable       int            NULL           
===========================================================
===========================================================
Local:putchar
ID             category       type           depictor
              
===========================================================
===========================================================
Formal:putint
ID             category       type           depictor
              
a              Variable       int            NULL           
===========================================================
===========================================================
Local:putint
ID             category       type           depictor
              
===========================================================
===========================================================
Formal:getarray
ID             category       type           depictor
              
a              Array          int            ----------> dim=1
===========================================================
===========================================================
Local:getarray
ID             category       type           depictor
              
scope type is wrong
               Variable                      NULL           
===========================================================
===========================================================
Formal:getchar
ID             category       type           depictor
              
               NOParam                       NULL           
===========================================================
===========================================================
Local:getchar
ID             category       type           depictor
              
===========================================================
===========================================================
Formal:getint
ID             category       type           depictor
              
               NOParam                       NULL           
===========================================================
===========================================================
Local:getint
ID             category       type           depictor
              
===========================================================
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
===========================================================
Local:main
ID             category       type           depictor
              
a              Variable       TYPEINTEGER    NULL           
b              Variable       TYPEINTEGER    NULL           
c              Variable       TYPEINTEGER    NULL           
d              Variable       TYPEINTEGER    NULL           
t              Variable       TYPEINTEGER    NULL           
               Block          BLOCKStmt      NULL           
               Block          BLOCKStmt      NULL           
===========================================================
456
789
789
456
789
789
789
789
456
789
789
789
789
789
789
456
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456

~~~~TAC~~~~~
 No  Source Position	TACCode
_______________________________________
  0  (at line   0)	CALL main

  1  (at line   2)	FUNCTION main :
  2  (at line   7)	_t0 := #10
  3  (at line   7)	a := _t0
  4  (at line   8)	_t1 := #6
  5  (at line   8)	b := _t1
  6  (at line   9)	_t2 := #4
  7  (at line   9)	c := _t2
  8  (at line  10)	_t3 := #5
  9  (at line  10)	d := _t3
 10  (at line  12)	_t7 := b
 11  (at line  12)	_t8 := c
 12  (at line  12)	_t4 := _t7 + _t8
 13  (at line  12)	_t9 := a
 14  (at line  12)	IF _t4 = _t9 GOTO label2
 15  (at line  12)	GOTO label1
 16  (at line  12)	LABEL label2 :
 17  (at line  12)	_t10 := d
 18  (at line  12)	_t14 := a
 19  (at line  12)	_t15 := #2
 20  (at line  12)	_t13 := _t14 / _t15
 21  (at line  12)	IF _t10 != _t13 GOTO label0
 22  (at line  12)	GOTO label1
 23  (at line  12)	LABEL label0 :
 24  (at line  13)	_t17 := b
 25  (at line  13)	_t21 := c
 26  (at line  13)	_t22 := d
 27  (at line  13)	_t19 := _t21 / _t22
 28  (at line  13)	_t20 := #2
 29  (at line  13)	_t18 := _t19 * _t20
 30  (at line  13)	_t16 := _t17 + _t18
 31  (at line  13)	t := _t16
 32  (at line  14)	_t23 := t
 33  (at line  14)	ARG _t23
 34  (at line  14)	CALL putint
 35  (at line  12)	LABEL label1 :
 36  (at line  16)	_t24 := c
 37  (at line  16)	_t27 := #0
 38  (at line  16)	IF _t24 < _t27 GOTO label3
 39  (at line  16)	GOTO label5
 40  (at line  16)	LABEL label5 :
 41  (at line  16)	_t31 := a
 42  (at line  16)	_t32 := c
 43  (at line  16)	_t28 := _t31 - _t32
 44  (at line  16)	_t33 := b
 45  (at line  16)	IF _t28 = _t33 GOTO label6
 46  (at line  16)	GOTO label4
 47  (at line  16)	LABEL label6 :
 48  (at line  16)	_t34 := a
 49  (at line  16)	_t38 := d
 50  (at line  16)	_t39 := #2
 51  (at line  16)	_t37 := _t38 * _t39
 52  (at line  16)	IF _t34 != _t37 GOTO label3
 53  (at line  16)	GOTO label4
 54  (at line  16)	LABEL label3 :
 55  (at line  17)	_t40 := #1
 56  (at line  17)	t := _t40
 57  (at line  18)	_t41 := t
 58  (at line  18)	ARG _t41
 59  (at line  18)	CALL putint
 60  (at line  16)	LABEL label4 :
 61  (at line  20)	_t42 := #0
 62  (at line  20)	RETURN _t42


===========================================================
Global
ID             category       type           depictor
               
putf           Function       void           NULL           
putarray       Function       void           NOT NULL       
putchar        Function       void           NOT NULL       
putint         Function       void           NOT NULL       
getarray       Function       int            NOT NULL       
getchar        Function       int            NOT NULL       
getint         Function       int            NOT NULL       
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Formal:putarray
ID             category       type           depictor
              
a              Array          int            ----------> dim=1
a              Variable       int            NULL           
===========================================================
===========================================================
Local:putarray
ID             category       type           depictor
              
scope type is wrong
               Variable                      NULL           
===========================================================
===========================================================
Formal:putchar
ID             category       type           depictor
              
a              Variable       int            NULL           
===========================================================
===========================================================
Local:putchar
ID             category       type           depictor
              
===========================================================
===========================================================
Formal:putint
ID             category       type           depictor
              
a              Variable       int            NULL           
===========================================================
===========================================================
Local:putint
ID             category       type           depictor
              
===========================================================
===========================================================
Formal:getarray
ID             category       type           depictor
              
a              Array          int            ----------> dim=1
===========================================================
===========================================================
Local:getarray
ID             category       type           depictor
              
scope type is wrong
               Variable                      NULL           
===========================================================
===========================================================
Formal:getchar
ID             category       type           depictor
              
               NOParam                       NULL           
===========================================================
===========================================================
Local:getchar
ID             category       type           depictor
              
===========================================================
===========================================================
Formal:getint
ID             category       type           depictor
              
               NOParam                       NULL           
===========================================================
===========================================================
Local:getint
ID             category       type           depictor
              
===========================================================
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
scope type is wrong
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build assembly code
tac type FUNCTIONDF
Variable offset count+4 :a
Variable offset count+4 :b
Variable offset count+4 :c
Variable offset count+4 :d
Variable offset count+4 :t
Variable offset count+4 :a
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t0
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t1
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t2
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t3
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t4
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t7
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t8
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t9
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t10
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t13
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t14
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t15
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t16
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t17
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t18
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t19
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t20
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t21
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t22
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t23
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t24
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t27
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t28
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t31
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t32
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t33
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t34
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t37
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t38
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t39
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t40
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t41
Variable offset count+4 :_t42
tac type ASSIGN
 assign 10 to tegisteruserreg0contains0
userreg1contains0
userreg2contains0
userreg3contains0
userreg4contains0
userreg5contains0
userreg6contains0
userreg8contains0
userreg9contains0
userreg10contains0
0
userreg0contains0x98db10
tac type ASSIGN
userreg0contains0x98db10
userreg1contains0
userreg2contains0
userreg3contains0
userreg4contains0
userreg5contains0
userreg6contains0
userreg8contains0
userreg9contains0
userreg10contains0
userreg0contains0x98db10
tac type ASSIGN
 assign 6 to tegisteruserreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0
userreg3contains0
userreg4contains0
userreg5contains0
userreg6contains0
userreg8contains0
userreg9contains0
userreg10contains0
2
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
tac type ASSIGN
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0
userreg4contains0
userreg5contains0
userreg6contains0
userreg8contains0
userreg9contains0
userreg10contains0
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
tac type ASSIGN
 assign 4 to tegisteruserreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0
userreg5contains0
userreg6contains0
userreg8contains0
userreg9contains0
userreg10contains0
4
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
tac type ASSIGN
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
userreg5contains0
userreg6contains0
userreg8contains0
userreg9contains0
userreg10contains0
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
tac type ASSIGN
 assign 5 to tegisteruserreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
userreg5contains0x982d80
userreg6contains0
userreg8contains0
userreg9contains0
userreg10contains0
6
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
userreg5contains0x982d80
userreg6contains0x98e590
tac type ASSIGN
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
userreg5contains0x982d80
userreg6contains0x98e590
userreg8contains0
userreg9contains0
userreg10contains0
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
userreg5contains0x982d80
userreg6contains0x98e590
tac type ASSIGN
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
userreg5contains0x982d80
userreg6contains0x98e590
userreg8contains0x982ff0
userreg9contains0
userreg10contains0
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
tac type ASSIGN
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
userreg5contains0x982d80
userreg6contains0x98e590
userreg8contains0x982ff0
userreg9contains0x98e7b0
userreg10contains0
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
userreg5contains0x982d80
tac type ADD
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
userreg5contains0x982d80
userreg6contains0x98e590
userreg8contains0x982ff0
userreg9contains0x98e7b0
userreg10contains0x98e860
Store Register in getregisterNoLoad variable
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
userreg5contains0x982d80
userreg6contains0x98e590
userreg8contains0x982ff0
userreg9contains0x98e7b0
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
userreg5contains0x982d80
userreg6contains0x98e590
userreg8contains0x982ff0
userreg9contains0x98e7b0
userreg10contains0x98e700
Store Register in getregister variable
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type ASSIGN
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
userreg5contains0x982d80
userreg6contains0x98e590
userreg8contains0x982ff0
userreg9contains0x98e7b0
userreg10contains0x98e860
Store Register in getregisterNoLoad variable
userreg0contains0x98db10
userreg1contains0x9828a0
tac type IFEQ
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
userreg5contains0x982d80
userreg6contains0x98e590
userreg8contains0x982ff0
userreg9contains0x98e7b0
userreg10contains0x98ea30
Store Register in getregister variable
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
userreg5contains0x982d80
userreg6contains0x98e590
userreg8contains0x982ff0
userreg9contains0x98e7b0
userreg10contains0x98e700
Store Register in getregister variable
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type GOTO
Goto string B L1

tac type LABELDF
L2:

tac type ASSIGN
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
userreg5contains0x982d80
userreg6contains0x98e590
userreg8contains0x982ff0
userreg9contains0x98e7b0
userreg10contains0x98ea30
Store Register in getregisterNoLoad variable
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
userreg5contains0x982d80
userreg6contains0x98e590
userreg8contains0x982ff0
tac type ASSIGN
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
userreg5contains0x982d80
userreg6contains0x98e590
userreg8contains0x982ff0
userreg9contains0x98e7b0
userreg10contains0x98ec00
Store Register in getregisterNoLoad variable
userreg0contains0x98db10
userreg1contains0x9828a0
tac type ASSIGN
 assign 2 to tegisteruserreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
userreg5contains0x982d80
userreg6contains0x98e590
userreg8contains0x982ff0
userreg9contains0x98e7b0
userreg10contains0x98edc0
Store Register in getregisterNoLoad variable
10
userreg0contains0x98db10
userreg1contains0x9828a0
userreg2contains0x98dd10
userreg3contains0x982b10
userreg4contains0x98e420
userreg5contains0x982d80
userreg6contains0x98e590
userreg8contains0x982ff0
userreg9contains0x98e7b0
userreg10contains0x98ee70
tac type DIV
compiler: ./ObjectCode/Arm.cpp:578: ARM::ARM(TACCode *, ScopeItem *, vector<ScopeItem> &): Assertion `code.dest.Type = VARIABLE' failed.
Aborted (core dumped)
