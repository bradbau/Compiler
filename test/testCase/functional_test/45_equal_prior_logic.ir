--(end of buffer or a NUL)
--accepting rule at line 74 ("// Equal is prior to logic operator
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("c")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("d")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("10")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("6")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("c")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("4")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("d")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("5")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("t")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 101 ("if")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("c")
--accepting rule at line 114 (" ")
--accepting rule at line 93 ("==")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 90 ("&&")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("d")
--accepting rule at line 114 (" ")
--accepting rule at line 94 ("!=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 87 ("/")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("2")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("t")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("c")
--accepting rule at line 114 (" ")
--accepting rule at line 87 ("/")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("d")
--accepting rule at line 114 (" ")
--accepting rule at line 86 ("*")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("2")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("putint")
<int>
<id,main>
<(>
<)>
<{>
<int>
<id,a>
<;>
<int>
<id,b>
<;>
<int>
<id,c>
<;>
<int>
<id,d>
<;>
<id,a>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,b>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,c>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,d>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<int>
<id,t>
<;>
<if>
<(>
<id,b>
<+>
Lval
<id,c>
<==>
Lval
<id,a>
<&&>
Lval
<id,d>
<!=>
Lval
<id,a>
</>
Lval
<intd>
ExpNumber:0
<)>
<{>
<id,t>
<=>
Lval
<id,b>
<+>
Lval
<id,c>
</>
Lval
<id,d>
<*>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,put--accepting rule at line 80 ("(")
--accepting rule at line 112 ("t")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 101 ("if")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("c")
--accepting rule at line 114 (" ")
--accepting rule at line 96 ("<")
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 114 (" ")
--accepting rule at line 91 ("||")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 85 ("-")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("c")
--accepting rule at line 114 (" ")
--accepting rule at line 93 ("==")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 90 ("&&")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 94 ("!=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("d")
--accepting rule at line 114 (" ")
--accepting rule at line 86 ("*")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("2")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("t")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("putint")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("t")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
int>
<(>
<id,t>
<)>
Lval
<;>
<}>
<if>
<(>
<id,c>
<<>
Lval
<into>
ExpNumber:0
<||>
<id,a>
<->
Lval
<id,c>
<==>
Lval
<id,b>
<&&>
Lval
<id,a>
<!=>
Lval
<id,d>
<*>
Lval
<intd>
ExpNumber:0
<)>
<{>
<id,t>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,putint>
<(>
<id,t>
<)>
Lval
<;>
<}>
<return>
<into>
ExpNumber:0
<;>
<}>
CompUnits (2)
  FuncDef (2)
    NOFParam (2)
    Block (3)
      BlockItems (3)
        VarDecl (3)
          IDENTIFIER a
        BlockItems (4)
          VarDecl (4)
            IDENTIFIER b
          BlockItems (5)
            VarDecl (5)
              IDENTIFIER c
            BlockItems (6)
              VarDecl (6)
                IDENTIFIER d
              BlockItems (7)
                Lval_Opassign_Stmt (7)
                  LVal (7)
                    IDENTIFIER a
                    ArrayExps (7)
                  IntConst (7)
                    CONSTANTINTD: 10
                BlockItems (8)
                  Lval_Opassign_Stmt (8)
                    LVal (8)
                      IDENTIFIER b
                      ArrayExps (8)
                    IntConst (8)
                      CONSTANTINTD: 6
                  BlockItems (9)
                    Lval_Opassign_Stmt (9)
                      LVal (9)
                        IDENTIFIER c
                        ArrayExps (9)
                      IntConst (9)
                        CONSTANTINTD: 4
                    BlockItems (10)
                      Lval_Opassign_Stmt (10)
                        LVal (10)
                          IDENTIFIER d
                          ArrayExps (10)
                        IntConst (10)
                          CONSTANTINTD: 5
                      BlockItems (11)
                        VarDecl (11)
                          IDENTIFIER t
                        BlockItems (12)
                          IF_Stmt (12)
                            Cond_And (12)
                              Cond (12)
                                OPEQUAL (12)
                                  PLUSExp (12)
                                    LVal_EXP (12)
                                      LVal (12)
                                        IDENTIFIER b
                                        ArrayExps (12)
                                    LVal_EXP (12)
                                      LVal (12)
                                        IDENTIFIER c
                                        ArrayExps (12)
                                  LVal_EXP (12)
                                    LVal (12)
                                      IDENTIFIER a
                                      ArrayExps (12)
                              Cond (12)
                                OPNOTEQUAL (12)
                                  LVal_EXP (12)
                                    LVal (12)
                                      IDENTIFIER d
                                      ArrayExps (12)
                                  DIVIDEExp (12)
                                    LVal_EXP (12)
                                      LVal (12)
                                        IDENTIFIER a
                                        ArrayExps (12)
                                    IntConst (12)
                                      CONSTANTINTD: 2
                            Block_Stmt (13)
                              Block (13)
                                BlockItems (13)
                                  Lval_Opassign_Stmt (13)
                                    LVal (13)
                                      IDENTIFIER t
                                      ArrayExps (13)
                                    PLUSExp (13)
                                      LVal_EXP (13)
                                        LVal (13)
                                          IDENTIFIER b
                                          ArrayExps (13)
                                      MulExp (13)
                                        DIVIDEExp (13)
                                          LVal_EXP (13)
                                            LVal (13)
                                              IDENTIFIER c
                                              ArrayExps (13)
                                          LVal_EXP (13)
                                            LVal (13)
                                              IDENTIFIER d
                                              ArrayExps (13)
                                        IntConst (13)
                                          CONSTANTINTD: 2
                                  BlockItems (14)
                                    Exp_Stmt (14)
                                      funcall (14)
                                        IDENTIFIER putint
                                        FuncRParams (14)
                                          LVal_EXP (14)
                                            LVal (14)
                                              IDENTIFIER t
                                              ArrayExps (14)
                          BlockItems (16)
                            IF_Stmt (16)
                              Cond_Or (16)
                                Cond (16)
                                  OPLIGHT (16)
                                    LVal_EXP (16)
                                      LVal (16)
                                        IDENTIFIER c
                                        ArrayExps (16)
                                    IntConst (16)
                                      CONSTANTOCT: 0
                                Cond_And (16)
                                  Cond (16)
                                    OPEQUAL (16)
                                      MINUSExp (16)
                                        LVal_EXP (16)
                                          LVal (16)
                                            IDENTIFIER a
                                            ArrayExps (16)
                                        LVal_EXP (16)
                                          LVal (16)
                                            IDENTIFIER c
                                            ArrayExps (16)
                                      LVal_EXP (16)
                                        LVal (16)
                                          IDENTIFIER b
                                          ArrayExps (16)
                                  Cond (16)
                                    OPNOTEQUAL (16)
                                      LVal_EXP (16)
                                        LVal (16)
                                          IDENTIFIER a
                                          ArrayExps (16)
                                      MulExp (16)
                                        LVal_EXP (16)
                                          LVal (16)
                                            IDENTIFIER d
                                            ArrayExps (16)
                                        IntConst (16)
                                          CONSTANTINTD: 2
                              Block_Stmt (17)
                                Block (17)
                                  BlockItems (17)
                                    Lval_Opassign_Stmt (17)
                                      LVal (17)
                                        IDENTIFIER t
                                        ArrayExps (17)
                                      IntConst (17)
                                        CONSTANTINTD: 1
                                    BlockItems (18)
                                      Exp_Stmt (18)
                                        funcall (18)
                                          IDENTIFIER putint
                                          FuncRParams (18)
                                            LVal_EXP (18)
                                              LVal (18)
                                                IDENTIFIER t
                                                ArrayExps (18)
                            BlockItems (20)
                              Return_Stmt (20)
                                IntConst (20)
                                  CONSTANTOCT: 0


===========================================================
Global
ID             category       type           depictor
               
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
Local:main
ID             category       type           depictor
              
a              Variable       TYPEINTEGER    NULL           
b              Variable       TYPEINTEGER    NULL           
c              Variable       TYPEINTEGER    NULL           
d              Variable       TYPEINTEGER    NULL           
t              Variable       TYPEINTEGER    NULL           
               Block          BLOCKStmt      NULL           
               Block          BLOCKStmt      NULL           
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result

~~~~TAC~~~~~
 No  Source Position	TACCode
_______________________________________
  0  (at line   0)	CALL main

  1  (at line   2)	FUNCTION main :
  2  (at line   7)	_t42 := #10
  3  (at line   7)	 := _t42
  4  (at line   8)	_t41 := #6
  5  (at line   8)	 := _t41
  6  (at line   9)	_t40 := #4
  7  (at line   9)	 := _t40
  8  (at line  10)	_t39 := #5
  9  (at line  10)	 := _t39
 10  (at line  12)	_t22 := 
 11  (at line  12)	_t23 := 
 12  (at line  12)	_t19 := _t22 + _t23
 13  (at line  12)	_t24 := 
 14  (at line  12)	IF _t19 = _t24 GOTO label6
 15  (at line  12)	GOTO label5
 16  (at line  12)	LABEL label6 :
 17  (at line  12)	_t25 := 
 18  (at line  12)	_t29 := 
 19  (at line  12)	_t30 := #2
 20  (at line  12)	_t28 := _t29 / _t30
 21  (at line  12)	IF _t25 != _t28 GOTO label4
 22  (at line  12)	GOTO label5
 23  (at line  12)	LABEL label4 :
 24  (at line  13)	_t33 := 
 25  (at line  13)	_t37 := 
 26  (at line  13)	_t38 := 
 27  (at line  13)	_t35 := _t37 / _t38
 28  (at line  13)	_t36 := #2
 29  (at line  13)	_t34 := _t35 * _t36
 30  (at line  13)	_t32 := _t33 + _t34
 31  (at line  13)	 := _t32
 32  (at line  14)	_t31 := 
 33  (at line  14)	ARG _t31
 34  (at line  14)	CALL 
 35  (at line  12)	LABEL label5 :
 36  (at line  16)	_t1 := 
 37  (at line  16)	_t4 := #0
 38  (at line  16)	IF _t1 < _t4 GOTO label0
 39  (at line  16)	GOTO label2
 40  (at line  16)	LABEL label2 :
 41  (at line  16)	_t8 := 
 42  (at line  16)	_t9 := 
 43  (at line  16)	_t5 := _t8 - _t9
 44  (at line  16)	_t10 := 
 45  (at line  16)	IF _t5 = _t10 GOTO label3
 46  (at line  16)	GOTO label1
 47  (at line  16)	LABEL label3 :
 48  (at line  16)	_t11 := 
 49  (at line  16)	_t15 := 
 50  (at line  16)	_t16 := #2
 51  (at line  16)	_t14 := _t15 * _t16
 52  (at line  16)	IF _t11 != _t14 GOTO label0
 53  (at line  16)	GOTO label1
 54  (at line  16)	LABEL label0 :
 55  (at line  17)	_t18 := #1
 56  (at line  17)	 := _t18
 57  (at line  18)	_t17 := 
 58  (at line  18)	ARG _t17
 59  (at line  18)	CALL 
 60  (at line  16)	LABEL label1 :
 61  (at line  20)	_t0 := #0
 62  (at line  20)	RETURN _t0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build assembly code
tac type FUNCTIONDF
tec type ASSIGN
findregister: insldr rd=0,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
tec type ASSIGN
findregister: insldr rd=1,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
tec type ASSIGN
findregister: insldr rd=2,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
tec type ASSIGN
findregister: insldr rd=3,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
tec type ASSIGN
findregister: insldr rd=4,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=5,r1=11,r2 offset=0,op2type=1, insefft=0
tac type ADD
findregister: insldr rd=6,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=8,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFEQ
tac type GOTO
tac type LABELDF
tec type ASSIGN
findregister: insldr rd=9,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type DIV
compiler: ./ObjectCode/Arm.cpp:102: ARM::ARM(TACCode*, ScopeItem&): Assertion `code.dest.Type = VARIABLE' failed.
Aborted (core dumped)
