--(end of buffer or a NUL)
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("f")
--accepting rule at line 80 ("(")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("x")
--accepting rule at line 81 (")")
--accepting rule at line 115 ("
")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 101 ("if")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("x")
--accepting rule at line 93 ("==")
--accepting rule at line 109 ("1")
--accepting rule at line 81 (")")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 114 ("	")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 101 ("if")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("x")
--accepting rule at line 93 ("==")
--accepting rule at line 109 ("2")
--accepting rule at line 81 (")")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 114 ("	")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("a")
--accepting rule at line 89 ("=")
--accepting rule at line 112 ("x")
--accepting rule at line 85 ("-")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("b")
--accepting rule at line 89 ("=")
--accepting rule at line 112 ("x")
--accepting rule at line 85 ("-")
--accepting rule at line 109 ("2")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("c")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("c")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("f")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("a")
--accepting rule at line 81 (")")
--accepting rule at line 84 ("+")
--accepting rule at line 112 ("f")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("b")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("c")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
<int>
<id,n>
<;>
<int>
<id,f>
<(>
<int>
<id,x>
<)>
<{>
<if>
<(>
<id,x>
<==>
Lval
<intd>
ExpNumber:0
<)>
<return>
<intd>
ExpNumber:0
<;>
<if>
<(>
<id,x>
<==>
Lval
<intd>
ExpNumber:0
<)>
<return>
<intd>
ExpNumber:0
<;>
<int>
<id,a>
<;>
<int>
<id,b>
<;>
<id,a>
<=>
Lval
<id,x>
<->
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,b>
<=>
Lval
<id,x>
<->
Lval
<intd>
ExpNumber:0
<;>
stmt1
<int>
<id,c>
<;>
<id,c>
<=>
Lval
<id,f>
<(>
<id,a>
<)>
Lval
<+>
<id,f>
<(>
<id,b>
<)>
Lval
<;>
stmt1
<return>
<id,c>
<;>
Lval
<}>
<int>
<id--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 115 ("
")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("n")
--accepting rule at line 89 ("=")
--accepting rule at line 112 ("getint")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("t")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("xx")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("t")
--accepting rule at line 89 ("=")
--accepting rule at line 112 ("f")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("n")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("putint")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("t")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("newline")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("newline")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("10")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("putch")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("newline")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("t")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
,main>
<(>
<)>
<{>
<id,n>
<=>
Lval
<id,getint>
<(>
<)>
<;>
stmt1
<int>
<id,t>
<;>
<int>
<id,xx>
<;>
<id,t>
<=>
Lval
<id,f>
<(>
<id,n>
<)>
Lval
<;>
stmt1
<id,putint>
<(>
<id,t>
<)>
Lval
<;>
<int>
<id,newline>
<;>
<id,newline>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,putch>
<(>
<id,newline>
<)>
Lval
<;>
<return>
<id,t>
<;>
Lval
<}>
CompUnits (1)
  VarDecl (1)
    IDENTIFIER n
  CompUnits (2)
    FuncDef (2)
      FuncFParam (2)
      Block (4)
        BlockItems (4)
          IF_Stmt (4)
            Cond (4)
              OPEQUAL (4)
                LVal_EXP (4)
                  LVal (4)
                    IDENTIFIER x
                    ArrayExps (4)
                IntConst (4)
                  CONSTANTINTD: 1
            Return_Stmt (5)
              IntConst (5)
                CONSTANTINTD: 1
          BlockItems (6)
            IF_Stmt (6)
              Cond (6)
                OPEQUAL (6)
                  LVal_EXP (6)
                    LVal (6)
                      IDENTIFIER x
                      ArrayExps (6)
                  IntConst (6)
                    CONSTANTINTD: 2
              Return_Stmt (7)
                IntConst (7)
                  CONSTANTINTD: 1
            BlockItems (8)
              VarDecl (8)
                IDENTIFIER a
              BlockItems (9)
                VarDecl (9)
                  IDENTIFIER b
                BlockItems (10)
                  Lval_Opassign_Stmt (10)
                    LVal (10)
                      IDENTIFIER a
                      ArrayExps (10)
                    MINUSExp (10)
                      LVal_EXP (10)
                        LVal (10)
                          IDENTIFIER x
                          ArrayExps (10)
                      IntConst (10)
                        CONSTANTINTD: 1
                  BlockItems (11)
                    Lval_Opassign_Stmt (11)
                      LVal (11)
                        IDENTIFIER b
                        ArrayExps (11)
                      MINUSExp (11)
                        LVal_EXP (11)
                          LVal (11)
                            IDENTIFIER x
                            ArrayExps (11)
                        IntConst (11)
                          CONSTANTINTD: 2
                    BlockItems (12)
                      VarDecl (12)
                        IDENTIFIER c
                      BlockItems (13)
                        Lval_Opassign_Stmt (13)
                          LVal (13)
                            IDENTIFIER c
                            ArrayExps (13)
                          PLUSExp (13)
                            funcall (13)
                              IDENTIFIER f
                              FuncRParams (13)
                                LVal_EXP (13)
                                  LVal (13)
                                    IDENTIFIER a
                                    ArrayExps (13)
                            funcall (13)
                              IDENTIFIER f
                              FuncRParams (13)
                                LVal_EXP (13)
                                  LVal (13)
                                    IDENTIFIER b
                                    ArrayExps (13)
                        BlockItems (14)
                          Return_Stmt (14)
                            LVal_EXP (14)
                              LVal (14)
                                IDENTIFIER c
                                ArrayExps (14)
    CompUnits (16)
      FuncDef (16)
        NOFParam (16)
        Block (18)
          BlockItems (18)
            Lval_Opassign_Stmt (18)
              LVal (18)
                IDENTIFIER n
                ArrayExps (18)
              funcall (18)
                IDENTIFIER getint
            BlockItems (19)
              VarDecl (19)
                IDENTIFIER t
              BlockItems (20)
                VarDecl (20)
                  IDENTIFIER xx
                BlockItems (21)
                  Lval_Opassign_Stmt (21)
                    LVal (21)
                      IDENTIFIER t
                      ArrayExps (21)
                    funcall (21)
                      IDENTIFIER f
                      FuncRParams (21)
                        LVal_EXP (21)
                          LVal (21)
                            IDENTIFIER n
                            ArrayExps (21)
                  BlockItems (22)
                    Exp_Stmt (22)
                      funcall (22)
                        IDENTIFIER putint
                        FuncRParams (22)
                          LVal_EXP (22)
                            LVal (22)
                              IDENTIFIER t
                              ArrayExps (22)
                    BlockItems (23)
                      VarDecl (23)
                        IDENTIFIER newline
                      BlockItems (24)
                        Lval_Opassign_Stmt (24)
                          LVal (24)
                            IDENTIFIER newline
                            ArrayExps (24)
                          IntConst (24)
                            CONSTANTINTD: 10
                        BlockItems (25)
                          Exp_Stmt (25)
                            funcall (25)
                              IDENTIFIER putch
                              FuncRParams (25)
                                LVal_EXP (25)
                                  LVal (25)
                                    IDENTIFIER newline
                                    ArrayExps (25)
                          BlockItems (26)
                            Return_Stmt (26)
                              LVal_EXP (26)
                                LVal (26)
                                  IDENTIFIER t
                                  ArrayExps (26)


===========================================================
Global
ID             category       type           depictor
               
n              Variable       TYPEINTEGER    NULL           
f              Function       TYPEINTEGER    NOT NULL       
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
Formal:f
ID             category       type           depictor
              
x              Variable       TYPEINTEGER    NOT NULL       
===========================================================
Local:f
ID             category       type           depictor
              
a              Variable       TYPEINTEGER    NULL           
b              Variable       TYPEINTEGER    NULL           
c              Variable       TYPEINTEGER    NULL           
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
Local:main
ID             category       type           depictor
              
t              Variable       TYPEINTEGER    NULL           
xx             Variable       TYPEINTEGER    NULL           
newline        Variable       TYPEINTEGER    NULL           
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result

~~~~TAC~~~~~
 No  Source Position	TACCode
_______________________________________
  0  (at line   0)	CALL main

  1  (at line   2)	FUNCTION f :
  2  (at line   2)	PARAM x
  3  (at line   4)	_t24 := 
  4  (at line   4)	_t27 := #1
  5  (at line   4)	IF _t24 = _t27 GOTO label2
  6  (at line   4)	GOTO label3
  7  (at line   4)	LABEL label2 :
  8  (at line   5)	_t28 := #1
  9  (at line   5)	RETURN _t28
 10  (at line   4)	LABEL label3 :
 11  (at line   6)	_t19 := 
 12  (at line   6)	_t22 := #2
 13  (at line   6)	IF _t19 = _t22 GOTO label0
 14  (at line   6)	GOTO label1
 15  (at line   6)	LABEL label0 :
 16  (at line   7)	_t23 := #1
 17  (at line   7)	RETURN _t23
 18  (at line   6)	LABEL label1 :
 19  (at line  10)	_t17 := 
 20  (at line  10)	_t18 := #1
 21  (at line  10)	_t16 := _t17 - _t18
 22  (at line  10)	 := _t16
 23  (at line  11)	_t14 := 
 24  (at line  11)	_t15 := #2
 25  (at line  11)	_t13 := _t14 - _t15
 26  (at line  11)	 := _t13
 27  (at line  13)	_t11 := 
 28  (at line  13)	ARG _t11
 29  (at line  13)	_t9 := CALL f
 30  (at line  13)	_t12 := 
 31  (at line  13)	ARG _t12
 32  (at line  13)	_t10 := CALL f
 33  (at line  13)	_t8 := _t9 + _t10
 34  (at line  13)	 := _t8
 35  (at line  14)	_t7 := 
 36  (at line  14)	RETURN _t7

 37  (at line  16)	FUNCTION main :
 38  (at line  18)	_t6 := CALL 
 39  (at line  18)	 := _t6
 40  (at line  21)	_t5 := 
 41  (at line  21)	ARG _t5
 42  (at line  21)	_t4 := CALL f
 43  (at line  21)	 := _t4
 44  (at line  22)	_t3 := 
 45  (at line  22)	ARG _t3
 46  (at line  22)	CALL 
 47  (at line  24)	_t2 := #10
 48  (at line  24)	 := _t2
 49  (at line  25)	_t1 := 
 50  (at line  25)	ARG _t1
 51  (at line  25)	CALL 
 52  (at line  26)	_t0 := 
 53  (at line  26)	RETURN _t0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build assembly code
tac type FUNCTIONDF
tec type ASSIGN
findregister: insldr rd=0,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=1,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=2,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFEQ
tac type GOTO
tac type LABELDF
tec type ASSIGN
findregister: insldr rd=3,r1=11,r2 offset=0,op2type=1, insefft=0
tac type RETURN
tac type LABELDF
tec type ASSIGN
findregister: insldr rd=4,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=5,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFEQ
tac type GOTO
tac type LABELDF
tec type ASSIGN
findregister: insldr rd=6,r1=11,r2 offset=0,op2type=1, insefft=0
tac type RETURN
tac type LABELDF
tec type ASSIGN
findregister: insldr rd=8,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=9,r1=11,r2 offset=0,op2type=1, insefft=0
tac type SUB
compiler: ./ObjectCode/Arm.cpp:75: ARM::ARM(TACCode*, ScopeItem&): Assertion `code.dest.Type = VARIABLE' failed.
Aborted (core dumped)
