arg S
--(end of buffer or a NUL)
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("fib")
--accepting rule at line 80 ("(")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 101 ("if")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("n")
--accepting rule at line 114 (" ")
--accepting rule at line 93 ("==")
<int>
<id,fib>
<(>
<int>
<id,n>
<)>
<{>
<if>
<(>
<id,n>
<==>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 81 (")")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 114 ("	")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 101 ("if")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("n")
--accepting rule at line 114 (" ")
--accepting rule at line 93 ("==")
Lval
<into>
ExpNumber:0
<)>
<return>
<into>
ExpNumber:0
<;>
<if>
<(>
<id,n>
<==>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 81 (")")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 114 ("	")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("p")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("p")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<intd>
ExpNumber:0
<)>
<return>
<intd>
ExpNumber:0
<;>
<int>
<id,p>
<;>
<id,p>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 114 (" ")
--accepting rule at line 85 ("-")
Lval
<id,n>
<->
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("q")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("q")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<int>
<id,q>
<;>
<id,q>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 114 (" ")
--accepting rule at line 85 ("-")
Lval
<id,n>
<->
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("2")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("fib")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("p")
--accepting rule at line 81 (")")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<return>
<id,fib>
<(>
<id,p>
<)>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("fib")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("q")
--accepting rule at line 81 (")")
Lval
<+>
<id,fib>
<(>
<id,q>
<)>
33333333333
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("tmp")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("tmp")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<;>
<}>
<int>
<id,main>
<(>
<)>
<{>
<int>
<id,tmp>
<;>
<id,tmp>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("10")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("fib")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("tmp")
--accepting rule at line 81 (")")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<return>
<id,fib>
<(>
<id,tmp>
<)>
33333333333
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--(end of buffer or a NUL)
--EOF (start condition 0)
Lval
<;>
<}>
CompUnits (1)
  FuncDef (1)
    FuncFParam (1)
    Block (2)
      BlockItems (2)
        IF_Stmt (2)
          Cond (2)
            OPEQUAL (2)
              LVal_EXP (2)
                LVal (2)
                  IDENTIFIER n
                  ArrayExps (2)
              IntConst (2)
                CONSTANTOCT: 0
          Return_Stmt (3)
            IntConst (3)
              CONSTANTOCT: 0
        BlockItems (4)
          IF_Stmt (4)
            Cond (4)
              OPEQUAL (4)
                LVal_EXP (4)
                  LVal (4)
                    IDENTIFIER n
                    ArrayExps (4)
                IntConst (4)
                  CONSTANTINTD: 1
            Return_Stmt (5)
              IntConst (5)
                CONSTANTINTD: 1
          BlockItems (6)
            VarDecl (6)
              IDENTIFIER p
            BlockItems (7)
              Lval_Opassign_Stmt (7)
                LVal (7)
                  IDENTIFIER p
                  ArrayExps (7)
                MINUSExp (7)
                  LVal_EXP (7)
                    LVal (7)
                      IDENTIFIER n
                      ArrayExps (7)
                  IntConst (7)
                    CONSTANTINTD: 1
              BlockItems (8)
                VarDecl (8)
                  IDENTIFIER q
                BlockItems (9)
                  Lval_Opassign_Stmt (9)
                    LVal (9)
                      IDENTIFIER q
                      ArrayExps (9)
                    MINUSExp (9)
                      LVal_EXP (9)
                        LVal (9)
                          IDENTIFIER n
                          ArrayExps (9)
                      IntConst (9)
                        CONSTANTINTD: 2
                  BlockItems (10)
                    Return_Stmt (10)
                      PLUSExp (10)
                        funcall (10)
                          IDENTIFIER fib
                          FuncRParams (10)
                            LVal_EXP (10)
                              LVal (10)
                                IDENTIFIER p
                                ArrayExps (10)
                        funcall (10)
                          IDENTIFIER fib
                          FuncRParams (10)
                            LVal_EXP (10)
                              LVal (10)
                                IDENTIFIER q
                                ArrayExps (10)
  CompUnits (13)
    FuncDef (13)
      NOFParam (13)
      Block (14)
        BlockItems (14)
          VarDecl (14)
            IDENTIFIER tmp
          BlockItems (15)
            Lval_Opassign_Stmt (15)
              LVal (15)
                IDENTIFIER tmp
                ArrayExps (15)
              IntConst (15)
                CONSTANTINTD: 10
            BlockItems (16)
              Return_Stmt (16)
                funcall (16)
                  IDENTIFIER fib
                  FuncRParams (16)
                    LVal_EXP (16)
                      LVal (16)
                        IDENTIFIER tmp
                        ArrayExps (16)


===========================================================
Global
ID             category       type           depictor
               
fib            Function       TYPEINTEGER    NOT NULL       
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Formal:fib
ID             category       type           depictor
              
n              Variable       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Local:fib
ID             category       type           depictor
              
p              Variable       TYPEINTEGER    NULL           
q              Variable       TYPEINTEGER    NULL           
===========================================================
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
===========================================================
Local:main
ID             category       type           depictor
              
tmp            Variable       TYPEINTEGER    NULL           
===========================================================
789
789
123
789
789
123
789
789
789
789
789
123
789
789
789
789
789
123
789
789
789
789
789
789
789
789
789
789
123
789
789
789
789
789
789
789
789
789
789
123
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
123
789
789
789
789
789
789
789
789
789
789
789
789
789
123
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
456
789
789
789
789
456
789
789
456
789
789
456

~~~~TAC~~~~~
 No  Source Position	TACCode
_______________________________________
  0  (at line   0)	CALL main

  1  (at line   1)	FUNCTION fib :
  2  (at line   1)	PARAM n
  3  (at line   2)	_t0 := n
  4  (at line   2)	_t3 := #0
  5  (at line   2)	IF _t0 = _t3 GOTO label0
  6  (at line   2)	GOTO label1
  7  (at line   2)	LABEL label0 :
  8  (at line   3)	_t4 := #0
  9  (at line   3)	RETURN _t4
 10  (at line   2)	LABEL label1 :
 11  (at line   4)	_t5 := n
 12  (at line   4)	_t8 := #1
 13  (at line   4)	IF _t5 = _t8 GOTO label2
 14  (at line   4)	GOTO label3
 15  (at line   4)	LABEL label2 :
 16  (at line   5)	_t9 := #1
 17  (at line   5)	RETURN _t9
 18  (at line   4)	LABEL label3 :
 19  (at line   7)	_t11 := n
 20  (at line   7)	_t12 := #1
 21  (at line   7)	_t10 := _t11 - _t12
 22  (at line   7)	p := _t10
 23  (at line   9)	_t14 := n
 24  (at line   9)	_t15 := #2
 25  (at line   9)	_t13 := _t14 - _t15
 26  (at line   9)	q := _t13
 27  (at line  10)	_t19 := p
 28  (at line  10)	ARG _t19
 29  (at line  10)	_t17 := CALL fib
 30  (at line  10)	_t20 := q
 31  (at line  10)	ARG _t20
 32  (at line  10)	_t18 := CALL fib
 33  (at line  10)	_t16 := _t17 + _t18
 34  (at line  10)	RETURN _t16

 35  (at line  13)	FUNCTION main :
 36  (at line  15)	_t21 := #10
 37  (at line  15)	tmp := _t21
 38  (at line  16)	_t23 := tmp
 39  (at line  16)	ARG _t23
 40  (at line  16)	_t22 := CALL fib
 41  (at line  16)	RETURN _t22


===========================================================
Global
ID             category       type           depictor
               
fib            Function       TYPEINTEGER    NOT NULL       
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Formal:fib
ID             category       type           depictor
              
n              Variable       TYPEINTEGER    NOT NULL       
scope type is wrong
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
scope type is wrong
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build assembly code
tac type FUNCTIONDF
Variable offset count+4 :p
Variable offset count+4 :p
Variable offset count+4 :p
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t0
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t3
Variable offset count+4 :_t4
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t5
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t8
Variable offset count+4 :_t9
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t10
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t11
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t12
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t13
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t14
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t15
Variable offset count+4 :_t16
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t17
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t18
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t19
scope type not local in functiondf
scopeprev:1
Variable offset count+4 :_t20
tec type ASSIGN
findregister: insldr rd=0,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=1,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=2,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFEQ
tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L1

tac type LABELDF
L0:

tec type ASSIGN
findregister: insldr rd=3,r1=11,r2 offset=0,op2type=1, insefft=0
tac type RETURN
tac type ARG
tac type LABELDF
L1:

tec type ASSIGN
findregister: insldr rd=4,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=5,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFEQ
tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L3

tac type LABELDF
L2:

tec type ASSIGN
findregister: insldr rd=6,r1=11,r2 offset=0,op2type=1, insefft=0
tac type RETURN
tac type ARG
tac type LABELDF
L3:

tec type ASSIGN
findregister: insldr rd=8,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=9,r1=11,r2 offset=0,op2type=1, insefft=0
tac type SUB
compiler: ./ObjectCode/Arm.cpp:85: ARM::ARM(TACCode *, ScopeItem &): Assertion `code.dest.Type = VARIABLE' failed.
Aborted (core dumped)
