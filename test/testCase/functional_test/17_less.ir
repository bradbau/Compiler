arg S
--(end of buffer or a NUL)
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
<int>
<id,a>
<;>
<int>
<id,b>
<;>
<int>
<id,main>
<(>
<)>
<{>
<id,a>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("getint")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<id,getint>
<(>
<)>
<;>
stmt1
<id,b>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("getint")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 101 ("if")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 96 ("<")
Lval
<id,getint>
<(>
<)>
<;>
stmt1
<if>
<(>
<id,a>
<<>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 81 (")")
Lval
<id,b>
<)>
33333333333
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 114 ("	")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 102 ("else")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 114 ("	")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
Lval
<{>
<return>
<intd>
ExpNumber:0
<;>
<}>
<else>
<{>
<return>
<into>
ExpNumber:0
<;>
<}>
<}>
CompUnits (1)
  VarDecl (1)
    IDENTIFIER a
  CompUnits (2)
    VarDecl (2)
      IDENTIFIER b
    CompUnits (3)
      FuncDef (3)
        NOFParam (3)
        Block (4)
          BlockItems (4)
            Lval_Opassign_Stmt (4)
              LVal (4)
                IDENTIFIER a
                ArrayExps (4)
              funcall (4)
                IDENTIFIER getint
            BlockItems (5)
              Lval_Opassign_Stmt (5)
                LVal (5)
                  IDENTIFIER b
                  ArrayExps (5)
                funcall (5)
                  IDENTIFIER getint
              BlockItems (6)
                IF_ELSE_Stmt (6)
                  Cond (6)
                    OPLIGHT (6)
                      LVal_EXP (6)
                        LVal (6)
                          IDENTIFIER a
                          ArrayExps (6)
                      LVal_EXP (6)
                        LVal (6)
                          IDENTIFIER b
                          ArrayExps (6)
                  Block_Stmt (7)
                    Block (7)
                      BlockItems (7)
                        Return_Stmt (7)
                          IntConst (7)
                            CONSTANTINTD: 1
                  Block_Stmt (10)
                    Block (10)
                      BlockItems (10)
                        Return_Stmt (10)
                          IntConst (10)
                            CONSTANTOCT: 0


===========================================================
Global
ID             category       type           depictor
               
a              Variable       TYPEINTEGER    NULL           
b              Variable       TYPEINTEGER    NULL           
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
===========================================================
Local:main
ID             category       type           depictor
              
               Block          BLOCKStmt      NULL           
               Block          BLOCKStmt      NULL           
===========================================================
789
789
789
789
TraverseScopeStack no result
789
789
789
789
789
789
789
789
789
TraverseScopeStack no result
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789

~~~~TAC~~~~~
 No  Source Position	TACCode
_______________________________________
  0  (at line   0)	CALL main

  1  (at line   3)	FUNCTION main :
  2  (at line   4)	_t0 := CALL 
  3  (at line   4)	a := _t0
  4  (at line   5)	_t1 := CALL 
  5  (at line   5)	b := _t1
  6  (at line   6)	_t2 := a
  7  (at line   6)	_t5 := b
  8  (at line   6)	IF _t2 < _t5 GOTO label0
  9  (at line   6)	GOTO label1
 10  (at line   6)	LABEL label0 :
 11  (at line   7)	_t6 := #1
 12  (at line   7)	RETURN _t6
 13  (at line   6)	GOTO label2
 14  (at line   6)	LABEL label1 :
 15  (at line  10)	_t7 := #0
 16  (at line  10)	RETURN _t7
 17  (at line   6)	LABEL label2 :


===========================================================
Global
ID             category       type           depictor
               
a              Variable       TYPEINTEGER    NULL           
b              Variable       TYPEINTEGER    NULL           
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
scope type is wrong
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build assembly code
tac type FUNCTIONDF
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t0
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t1
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t2
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t5
Variable offset count+4 :_t6
Variable offset count+4 :_t7
tac type CALLASSIGN
findregister: insldr rd=0,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=1,r1=11,r2 offset=0,op2type=1, insefft=0
tac type CALLASSIGN
findregister: insldr rd=2,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=3,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=4,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=5,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFLT
tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L1

tac type LABELDF
L0:

tec type ASSIGN
findregister: insldr rd=6,r1=11,r2 offset=0,op2type=1, insefft=0
tac type RETURN
tac type ARG
tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L2

tac type LABELDF
L1:

tec type ASSIGN
findregister: insldr rd=8,r1=11,r2 offset=0,op2type=1, insefft=0
tac type RETURN
tac type ARG
tac type LABELDF
L2:

tac build complete
instruction number1
instruction number2
push instruction
instruction number3
instruction number4
instruction number5
 ControlInstruction tostring
INS BL tostring
instruction number6
ldr instruction
op2type==1
instruction number7
instruction number8
ldr instruction
op2type==1
instruction number9
instruction number10
 ControlInstruction tostring
INS BL tostring
instruction number11
ldr instruction
op2type==1
instruction number12
instruction number13
ldr instruction
op2type==1
instruction number14
instruction number15
ldr instruction
op2type==1
instruction number16
instruction number17
ldr instruction
op2type==1
instruction number18
instruction number19
instruction number20
 ControlInstruction tostring
INS B tostring
instruction number21
 ControlInstruction tostring
INS B tostring
instruction number22
instruction number23
ldr instruction
op2type==1
instruction number24
instruction number25
instruction number26
instruction number27
instruction number28
 ControlInstruction tostring
INS BX tostring
instruction number29
 ControlInstruction tostring
INS B tostring
instruction number30
instruction number31
ldr instruction
op2type==1
instruction number32
instruction number33
instruction number34
instruction number35
instruction number36
 ControlInstruction tostring
INS BX tostring
instruction number37
#armv7 assembly code
main:
PUSH {fp}
ADD  fp, sp, #0
SUB sp, sp, #0
BL 
LDR r0, [fp, 0x0]
MOV r0, r0
LDR r1, [fp, 0x0]
ADD  r1, r0, #0
BL 
LDR r2, [fp, 0x0]
MOV r2, r0
LDR r3, [fp, 0x0]
ADD  r3, r2, #0
LDR r4, [fp, 0x0]
ADD  r4, r1, #0
LDR r5, [fp, 0x0]
ADD  r5, r3, #0
CMP r4, r5, 
BLT L0
B L1
L0:
LDR r6, [fp, 0x0]
MOV r6, #1
ADD  r0, r6, #0
ADD  sp, fp, #0
POP {fp}
BX lr
B L2
L1:
LDR r8, [fp, 0x0]
MOV r8, #0
ADD  r0, r8, #0
ADD  sp, fp, #0
POP {fp}
BX lr
L2:

output file open error
