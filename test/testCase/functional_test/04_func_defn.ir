--(end of buffer or a NUL)
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("func")
--accepting rule at line 80 ("(")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("p")
--accepting rule at line 81 (")")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("p")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("p")
--accepting rule at line 114 (" ")
--accepting rule at line 85 ("-")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("p")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("10")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("func")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("a")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
<int>
<id,a>
<;>
<int>
<id,func>
<(>
<int>
<id,p>
<)>
<{>
<id,p>
<=>
Lval
<id,p>
<->
Lval
<intd>
ExpNumber:0
<;>
stmt1
<return>
<id,p>
<;>
Lval
<}>
<int>
<id,main>
<(>
<)>
<{>
<int>
<id,b>
<;>
<id,a>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,b>
<=>
Lval
<id,func>
<(>
<id,a>
<)>
Lval
<;>
stmt1
<return>
<id,b>
<;>
Lval
<}>
CompUnits (1)
  VarDecl (1)
    IDENTIFIER a
  CompUnits (2)
    FuncDef (2)
      FuncFParam (2)
      Block (3)
        BlockItems (3)
          Lval_Opassign_Stmt (3)
            LVal (3)
              IDENTIFIER p
              ArrayExps (3)
            MINUSExp (3)
              LVal_EXP (3)
                LVal (3)
                  IDENTIFIER p
                  ArrayExps (3)
              IntConst (3)
                CONSTANTINTD: 1
          BlockItems (4)
            Return_Stmt (4)
              LVal_EXP (4)
                LVal (4)
                  IDENTIFIER p
                  ArrayExps (4)
    CompUnits (6)
      FuncDef (6)
        NOFParam (6)
        Block (7)
          BlockItems (7)
            VarDecl (7)
              IDENTIFIER b
            BlockItems (8)
              Lval_Opassign_Stmt (8)
                LVal (8)
                  IDENTIFIER a
                  ArrayExps (8)
                IntConst (8)
                  CONSTANTINTD: 10
              BlockItems (9)
                Lval_Opassign_Stmt (9)
                  LVal (9)
                    IDENTIFIER b
                    ArrayExps (9)
                  funcall (9)
                    IDENTIFIER func
                    FuncRParams (9)
                      LVal_EXP (9)
                        LVal (9)
                          IDENTIFIER a
                          ArrayExps (9)
                BlockItems (10)
                  Return_Stmt (10)
                    LVal_EXP (10)
                      LVal (10)
                        IDENTIFIER b
                        ArrayExps (10)


===========================================================
Global
ID             category       type           depictor
               
a              Variable       TYPEINTEGER    NULL           
func           Function       TYPEINTEGER    NOT NULL       
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
Formal:func
ID             category       type           depictor
              
p              Variable       TYPEINTEGER    NULL           
===========================================================
Local:func
ID             category       type           depictor
              
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
Local:main
ID             category       type           depictor
              
b              Variable       TYPEINTEGER    NULL           

~~~~TAC~~~~~
 No  Source Position	TACCode
_______________________________________
  0  (at line   0)	CALL main

  1  (at line   2)	FUNCTION func :
  2  (at line   2)	PARAM p
  3  (at line   3)	_t6 := 
  4  (at line   3)	_t7 := #1
  5  (at line   3)	_t5 := _t6 - _t7
  6  (at line   3)	 := _t5
  7  (at line   4)	_t4 := 
  8  (at line   4)	RETURN _t4

  9  (at line   6)	FUNCTION main :
 10  (at line   8)	_t3 := #10
 11  (at line   8)	 := _t3
 12  (at line   9)	_t2 := 
 13  (at line   9)	ARG _t2
 14  (at line   9)	_t1 := CALL func
 15  (at line   9)	 := _t1
 16  (at line  10)	_t0 := 
 17  (at line  10)	RETURN _t0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build assembly code
tac type FUNCTIONDF
tec type ASSIGN
tec type ASSIGN
tac type SUB
compiler: ./ObjectCode/Arm.cpp:75: ARM::ARM(TACCode*, ScopeItem&): Assertion `code.dest.Type = VARIABLE' failed.
Aborted (core dumped)
