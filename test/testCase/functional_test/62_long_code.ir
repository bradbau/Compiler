<int>
<id,n>
<;>
<int>
<id,bubblesort>
<(>
<int>
<id,arr>
<[>
<]>
<)>
<{>
<int>
<id,i>
<;>
<int>
<id,j>
<;>
<id,i>
<=>
Lval
<into>
ExpNumber:0
<;>
stmt1
<while>
<(>
<id,i>
<<>
Lval
<id,n>
<->
Lval
<intd>
ExpNumber:0
<)>
<{>
<id,j>
<=>
Lval
<into>
ExpNumber:0
<;>
stmt1
<while>
<(>
<id,j>
<<>
Lval
<id,n>
<->
Lval
<id,i>
<->
Lval
<intd>
ExpNumber:0
<)>
<{>
<if>
<(>
<id,arr>
<[>
<id,j>
<]>
Lval
<>>
Lval
<id,arr>
<[>
<id,j>
<+>
Lval
<intd>
ExpNumber:0
<]>
<)>
Lval
<{>
<int>
<id,tmp>
<;>
<id,tmp>
<=>
Lval
<id,arr>
<[>
<id,j>
<+>
Lval
<intd>
ExpNumber:0
<]>
<;>
Lval
stmt1
<id,arr>
<[>
<id,j>
<+>
Lval
<intd>
ExpNumber:0
<]>
<=>
Lval
<id,arr>
<[>
<id,j>
<]>
Lval
<;>
Lval
stmt1
<id,arr>
<[>
<id,j>
<]>
Lval
<=>
Lval
<id,tmp>
<;>
Lval
stmt1
<}>
<id,j>
<=>
Lval
<id,j>
<+>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<id,i>
<=>
Lval
<id,i>
<+>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<return>
<into>
ExpNumber:0
<;>
<}>
<int>
<id,insertsort>
<(>
<int>
<id,a>
<[>
<]>
<)>
<{>
<int>
<id,i>
<;>
<id,i>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<while>
<(>
<id,i>
<<>
Lval
<id,n>
<)>
Lval
<{>
<int>
<id,temp>
<;>
<id,temp>
<=>
Lval
<id,a>
<[>
<id,i>
<]>
Lval
<;>
Lval
stmt1
<int>
<id,j>
<;>
<id,j>
<=>
Lval
<id,i>
<->
Lval
<intd>
ExpNumber:0
<;>
stmt1
<while>
<(>
<id,j>
<>>
Lval
<->
<intd>
ExpNumber:0
<&&>
<id,temp>
<<>
Lval
<id,a>
<[>
<id,j>
<]>
Lval
<)>
Lval
<{>
<id,a>
<[>
<id,j>
<+>
Lval
<intd>
ExpNumber:0
<]>
<=>
Lval
<id,a>
<[>
<id,j>
<]>
Lval
<;>
Lval
stmt1
<id,j>
<=>
Lval
<id,j>
<->
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<id,a>
<[>
<id,j>
<+>
Lval
<intd>
ExpNumber:0
<]>
<=>
Lval
<id,temp>
<;>
Lval
stmt1
<id,i>
<=>
Lval
<id,i>
<+>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<return>
<into>
ExpNumber:0
<;>
<}>
<int>
<id,QuickSort>
<(>
<int>
<id,arr>
<[>
<]>
<,>
<int>
<id,low>
<,>
<int>
<id,high>
<)>
<{>
<if>
<(>
<id,low>
<<>
Lval
<id,high>
<)>
Lval
<{>
<int>
<id,i>
<;>
<id,i>
<=>
Lval
<id,low>
<;>
Lval
stmt1
<int>
<id,j>
<;>
<id,j>
<=>
Lval
<id,high>
<;>
Lval
stmt1
<int>
<id,k>
<;>
<id,k>
<=>
Lval
<id,arr>
<[>
<id,low>
<]>
Lval
<;>
Lval
stmt1
<while>
<(>
<id,i>
<<>
Lval
<id,j>
<)>
Lval
<{>
<while>
<(>
<id,i>
<<>
Lval
<id,j>
<&&>
Lval
<id,arr>
<[>
<id,j>
<]>
Lval
<>>
Lval
<id,k>
<->
Lval
<intd>
ExpNumber:0
<)>
<{>
<id,j>
<=>
Lval
<id,j>
<->
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<if>
<(>
<id,i>
<<>
Lval
<id,j>
<)>
Lval
<{>
<id,arr>
<[>
<id,i>
<]>
Lval
<=>
Lval
<id,arr>
<[>
<id,j>
<]>
Lval
<;>
Lval
stmt1
<id,i>
<=>
Lval
<id,i>
<+>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<while>
<(>
<id,i>
<<>
Lval
<id,j>
<&&>
Lval
<id,arr>
<[>
<id,i>
<]>
Lval
<<>
Lval
<id,k>
<)>
Lval
<{>
<id,i>
<=>
Lval
<id,i>
<+>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<if>
<(>
<id,i>
<<>
Lval
<id,j>
<)>
Lval
<{>
<id,arr>
<[>
<id,j>
<]>
Lval
<=>
Lval
<id,arr>
<[>
<id,i>
<]>
Lval
<;>
Lval
stmt1
<id,j>
<=>
Lval
<id,j>
<->
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<}>
<id,arr>
<[>
<id,i>
<]>
Lval
<=>
Lval
<id,k>
<;>
Lval
stmt1
<int>
<id,tmp>
<;>
<id,tmp>
<=>
Lval
<id,i>
<->
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,tmp>
<=>
Lval
<id,QuickSort>
<(>
<id,arr>
<,>
Lval
<id,low>
<,>
Lval
<id,tmp>
<)>
Lval
<;>
stmt1
<id,tmp>
<=>
Lval
<id,i>
<+>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,tmp>
<=>
Lval
<id,QuickSort>
<(>
<id,arr>
<,>
Lval
<id,tmp>
<,>
Lval
<id,high>
<)>
Lval
<;>
stmt1
<}>
<return>
<into>
ExpNumber:0
<;>
<}>
<int>
<id,getMid>
<(>
<int>
<id,arr>
<[>
<]>
<)>
<{>
<int>
<id,mid>
<;>
<if>
<(>
<id,n>
<%>
Lval
<intd>
ExpNumber:0
<==>
<into>
ExpNumber:0
<)>
<{>
<id,mid>
<=>
Lval
<id,n>
</>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<return>
<(>
<id,arr>
<[>
<id,mid>
<]>
Lval
<+>
Lval
<id,arr>
<[>
<id,mid>
<->
Lval
<intd>
EIllegal instruction (core dumped)
