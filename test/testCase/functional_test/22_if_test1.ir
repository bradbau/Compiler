--(end of buffer or a NUL)
--accepting rule at line 74 ("// test if-else
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("ifElse")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("5")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 101 ("if")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 93 ("==")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("5")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("25")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 114 (" ")
--accepting rule at line 102 ("else")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 86 ("*")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("2")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("a")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 115 ("
")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("ifElse")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
<int>
<id,ifElse>
<(>
<)>
<{>
<int>
<id,a>
<;>
<id,a>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<if>
<(>
<id,a>
<==>
Lval
<intd>
ExpNumber:0
<)>
<{>
<id,a>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<else>
<{>
<id,a>
<=>
Lval
<id,a>
<*>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<return>
<(>
<id,a>
<)>
Lval
<;>
<}>
<int>
<id,main>
<(>
<)>
<{>
<return>
<(>
<id,ifElse>
<(>
<)>
<)>
<;>
<}>
CompUnits (2)
  FuncDef (2)
    NOFParam (2)
    Block (3)
      BlockItems (3)
        VarDecl (3)
          IDENTIFIER a
        BlockItems (4)
          Lval_Opassign_Stmt (4)
            LVal (4)
              IDENTIFIER a
              ArrayExps (4)
            IntConst (4)
              CONSTANTINTD: 5
          BlockItems (5)
            IF_ELSE_Stmt (5)
              Cond (5)
                OPEQUAL (5)
                  LVal_EXP (5)
                    LVal (5)
                      IDENTIFIER a
                      ArrayExps (5)
                  IntConst (5)
                    CONSTANTINTD: 5
              Block_Stmt (6)
                Block (6)
                  BlockItems (6)
                    Lval_Opassign_Stmt (6)
                      LVal (6)
                        IDENTIFIER a
                        ArrayExps (6)
                      IntConst (6)
                        CONSTANTINTD: 25
              Block_Stmt (8)
                Block (8)
                  BlockItems (8)
                    Lval_Opassign_Stmt (8)
                      LVal (8)
                        IDENTIFIER a
                        ArrayExps (8)
                      MulExp (8)
                        LVal_EXP (8)
                          LVal (8)
                            IDENTIFIER a
                            ArrayExps (8)
                        IntConst (8)
                          CONSTANTINTD: 2
            BlockItems (10)
              Return_Stmt (10)
                (Exp) (10)
                  LVal_EXP (10)
                    LVal (10)
                      IDENTIFIER a
                      ArrayExps (10)
  CompUnits (14)
    FuncDef (14)
      NOFParam (14)
      Block (15)
        BlockItems (15)
          Return_Stmt (15)
            (Exp) (15)
              funcall (15)
                IDENTIFIER ifElse


===========================================================
Global
ID             category       type           depictor
               
ifElse         Function       TYPEINTEGER    NOT NULL       
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
Formal:ifElse
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
Local:ifElse
ID             category       type           depictor
              
a              Variable       TYPEINTEGER    NULL           
               Block          BLOCKStmt      NULL           
               Block          BLOCKStmt      NULL           
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NULL           
===========================================================
Local:main
ID             category       type           depictor
              
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result

~~~~TAC~~~~~
 No  Source Position	TACCode
_______________________________________
  0  (at line   0)	CALL main

  1  (at line   2)	FUNCTION ifElse :
  2  (at line   4)	_t12 := #5
  3  (at line   4)	 := _t12
  4  (at line   5)	_t4 := 
  5  (at line   5)	_t7 := #5
  6  (at line   5)	IF _t4 = _t7 GOTO label0
  7  (at line   5)	GOTO label1
  8  (at line   5)	LABEL label0 :
  9  (at line   6)	_t8 := #25
 10  (at line   6)	 := _t8
 11  (at line   5)	GOTO label2
 12  (at line   5)	LABEL label1 :
 13  (at line   8)	_t10 := 
 14  (at line   8)	_t11 := #2
 15  (at line   8)	_t9 := _t10 * _t11
 16  (at line   8)	 := _t9
 17  (at line   5)	LABEL label2 :
 18  (at line  10)	_t3 := 
 19  (at line  10)	_t2 := _t3
 20  (at line  10)	RETURN _t2

 21  (at line  14)	FUNCTION main :
 22  (at line  15)	_t1 := CALL ifElse
 23  (at line  15)	_t0 := _t1
 24  (at line  15)	RETURN _t0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build assembly code
tac type FUNCTIONDF
tec type ASSIGN
tec type ASSIGN
tec type ASSIGN
tec type ASSIGN
tac type IFEQ
tac type GOTO
tac type LABELDF
tec type ASSIGN
tec type ASSIGN
tac type GOTO
tac type LABELDF
tec type ASSIGN
tec type ASSIGN
tac type MUL
compiler: ./ObjectCode/Arm.cpp:89: ARM::ARM(TACCode*, ScopeItem&): Assertion `code.dest.Type = VARIABLE' failed.
Aborted (core dumped)
