--(end of buffer or a NUL)
--accepting rule at line 74 ("// Use minus with sub in one expr
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 85 ("-")
--accepting rule at line 109 ("2")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 85 ("-")
--accepting rule at line 114 (" ")
--accepting rule at line 85 ("-")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
--accepting rule at line 114 (" ")
--accepting rule at line 85 ("-")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 88 ("%")
--accepting rule at line 114 (" ")
--accepting rule at line 85 ("-")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 85 ("-")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("putint")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("a")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
<int>
<id,main>
<(>
<)>
<{>
<int>
<id,a>
<;>
<int>
<id,b>
<;>
<id,a>
<=>
Lval
<->
<intd>
ExpNumber:0
<;>
stmt1
<id,b>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,a>
<=>
Lval
<id,a>
<->
Lval
<->
<id,b>
<+>
Lval
<->
<(>
<id,a>
<+>
Lval
<id,b>
<)>
Lval
<%>
<->
<(>
<id,a>
<->
Lval
<id,b>
<)>
Lval
<;>
stmt1
<id,putint>
<(>
<id,a>
<)>
Lval
<;>
<return>
<into>
ExpNumber:0
<;>
<}>
CompUnits (2)
  FuncDef (2)
    NOFParam (2)
    Block (3)
      BlockItems (3)
        VarDecl (3)
          IDENTIFIER a
        BlockItems (4)
          VarDecl (4)
            IDENTIFIER b
          BlockItems (5)
            Lval_Opassign_Stmt (5)
              LVal (5)
                IDENTIFIER a
                ArrayExps (5)
              OPMINUS_Exp (5)
                IntConst (5)
                  CONSTANTINTD: 2
            BlockItems (6)
              Lval_Opassign_Stmt (6)
                LVal (6)
                  IDENTIFIER b
                  ArrayExps (6)
                IntConst (6)
                  CONSTANTINTD: 1
              BlockItems (7)
                Lval_Opassign_Stmt (7)
                  LVal (7)
                    IDENTIFIER a
                    ArrayExps (7)
                  PLUSExp (7)
                    MINUSExp (7)
                      LVal_EXP (7)
                        LVal (7)
                          IDENTIFIER a
                          ArrayExps (7)
                      OPMINUS_Exp (7)
                        LVal_EXP (7)
                          LVal (7)
                            IDENTIFIER b
                            ArrayExps (7)
                    OPMINUS_Exp (7)
                      MODExp (7)
                        (Exp) (7)
                          PLUSExp (7)
                            LVal_EXP (7)
                              LVal (7)
                                IDENTIFIER a
                                ArrayExps (7)
                            LVal_EXP (7)
                              LVal (7)
                                IDENTIFIER b
                                ArrayExps (7)
                        OPMINUS_Exp (7)
                          (Exp) (7)
                            MINUSExp (7)
                              LVal_EXP (7)
                                LVal (7)
                                  IDENTIFIER a
                                  ArrayExps (7)
                              LVal_EXP (7)
                                LVal (7)
                                  IDENTIFIER b
                                  ArrayExps (7)
                BlockItems (8)
                  Exp_Stmt (8)
                    funcall (8)
                      IDENTIFIER putint
                      FuncRParams (8)
                        LVal_EXP (8)
                          LVal (8)
                            IDENTIFIER a
                            ArrayExps (8)
                  BlockItems (9)
                    Return_Stmt (9)
                      IntConst (9)
                        CONSTANTOCT: 0


===========================================================
Global
ID             category       type           depictor
               
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
Local:main
ID             category       type           depictor
              
a              Variable       TYPEINTEGER    NULL           
b              Variable       TYPEINTEGER    NULL           
Segmentation fault (core dumped)
