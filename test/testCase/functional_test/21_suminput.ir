arg S
--(end of buffer or a NUL)
--accepting rule at line 74 ("//sample:input n numbers,then print the sum of them;
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 82 ("[")
--accepting rule at line 109 ("10")
--accepting rule at line 83 ("]")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 115 ("
")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("n")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
<int>
<id,n>
<;>
<int>
<id,a>
<[>
<intd>
ExpNumber:0
<]>
<;>
<int>
<id,main>
<(>
<)>
<{>
<id,n>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("getint")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 101 ("if")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("n")
--accepting rule at line 114 (" ")
--accepting rule at line 95 (">")
Lval
<id,getint>
<(>
<)>
<;>
stmt1
<if>
<(>
<id,n>
<>>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("10")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 114 ("	")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("s")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<intd>
ExpNumber:0
<)>
<return>
<intd>
ExpNumber:0
<;>
<int>
<id,s>
<;>
<int>
<id,i>
<;>
<id,i>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("s")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<into>
ExpNumber:0
<;>
stmt1
<id,s>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 75 (";")
Lval
<id,i>
<;>
33333333333
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 103 ("while")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 96 ("<")
Lval
stmt1
<while>
<(>
<id,i>
<<>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 81 (")")
Lval
<id,n>
<)>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 114 (" ")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 82 ("[")
--accepting rule at line 112 ("i")
--accepting rule at line 83 ("]")
Lval
<{>
<id,a>
<[>
<id,i>
<]>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<=>
33333333333
22222222222222
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("getint")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("s")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<id,getint>
<(>
<)>
<;>
stmt1
<id,s>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("s")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
Lval
<id,s>
<+>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 82 ("[")
--accepting rule at line 112 ("i")
--accepting rule at line 83 ("]")
Lval
<id,a>
<[>
<id,i>
<]>
33333333333
--accepting rule at line 75 (";")
Lval
<;>
33333333333
22222222222222
--accepting rule at line 114 (" ")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 89 ("=")
Lval
stmt1
<id,i>
<=>
33333333333
--accepting rule at line 112 ("i")
--accepting rule at line 84 ("+")
Lval
<id,i>
<+>
33333333333
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 79 ("}")
--accepting rule at line 114 (" ")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("putint")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("s")
--accepting rule at line 81 (")")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<id,putint>
<(>
<id,s>
<)>
33333333333
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("newline")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("newline")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<;>
<int>
<id,newline>
<;>
<id,newline>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("10")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("putch")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("newline")
--accepting rule at line 81 (")")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,putch>
<(>
<id,newline>
<)>
33333333333
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("s")
--accepting rule at line 75 (";")
Lval
<;>
<return>
<id,s>
<;>
33333333333
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
Lval
<}>
CompUnits (2)
  VarDecl (2)
    IDENTIFIER n
  CompUnits (3)
    VarDecl (3)
      ArrayDec: demmision=0
        IDENTIFIER a
    CompUnits (4)
      FuncDef (4)
        NOFParam (4)
        Block (6)
          BlockItems (6)
            Lval_Opassign_Stmt (6)
              LVal (6)
                IDENTIFIER n
                ArrayExps (6)
              funcall (6)
                IDENTIFIER getint
            BlockItems (7)
              IF_Stmt (7)
                Cond (7)
                  OPGREAT (7)
                    LVal_EXP (7)
                      LVal (7)
                        IDENTIFIER n
                        ArrayExps (7)
                    IntConst (7)
                      CONSTANTINTD: 10
                Return_Stmt (8)
                  IntConst (8)
                    CONSTANTINTD: 1
              BlockItems (9)
                VarDecl (9)
                  IDENTIFIER s
                BlockItems (10)
                  VarDecl (10)
                    IDENTIFIER i
                  BlockItems (11)
                    Lval_Opassign_Stmt (11)
                      LVal (11)
                        IDENTIFIER i
                        ArrayExps (11)
                      IntConst (11)
                        CONSTANTOCT: 0
                    BlockItems (12)
                      Lval_Opassign_Stmt (12)
                        LVal (12)
                          IDENTIFIER s
                          ArrayExps (12)
                        LVal_EXP (12)
                          LVal (12)
                            IDENTIFIER i
                            ArrayExps (12)
                      BlockItems (13)
                        While_Stmt (13)
                          Cond (13)
                            OPLIGHT (13)
                              LVal_EXP (13)
                                LVal (13)
                                  IDENTIFIER i
                                  ArrayExps (13)
                              LVal_EXP (13)
                                LVal (13)
                                  IDENTIFIER n
                                  ArrayExps (13)
                          Block_Stmt (14)
                            Block (14)
                              BlockItems (14)
                                Lval_Opassign_Stmt (14)
                                  LVal (14)
                                    IDENTIFIER a
                                    ArrayExps (14)
                                      LVal_EXP (14)
                                        LVal (14)
                                          IDENTIFIER i
                                          ArrayExps (14)
                                      ArrayExps (14)
                                  funcall (14)
                                    IDENTIFIER getint
                                BlockItems (15)
                                  Lval_Opassign_Stmt (15)
                                    LVal (15)
                                      IDENTIFIER s
                                      ArrayExps (15)
                                    PLUSExp (15)
                                      LVal_EXP (15)
                                        LVal (15)
                                          IDENTIFIER s
                                          ArrayExps (15)
                                      LVal_EXP (15)
                                        LVal (15)
                                          IDENTIFIER a
                                          ArrayExps (15)
                                            LVal_EXP (15)
                                              LVal (15)
                                                IDENTIFIER i
                                                ArrayExps (15)
                                            ArrayExps (15)
                                  BlockItems (16)
                                    Lval_Opassign_Stmt (16)
                                      LVal (16)
                                        IDENTIFIER i
                                        ArrayExps (16)
                                      PLUSExp (16)
                                        LVal_EXP (16)
                                          LVal (16)
                                            IDENTIFIER i
                                            ArrayExps (16)
                                        IntConst (16)
                                          CONSTANTINTD: 1
                        BlockItems (18)
                          Exp_Stmt (18)
                            funcall (18)
                              IDENTIFIER putint
                              FuncRParams (18)
                                LVal_EXP (18)
                                  LVal (18)
                                    IDENTIFIER s
                                    ArrayExps (18)
                          BlockItems (19)
                            VarDecl (19)
                              IDENTIFIER newline
                            BlockItems (20)
                              Lval_Opassign_Stmt (20)
                                LVal (20)
                                  IDENTIFIER newline
                                  ArrayExps (20)
                                IntConst (20)
                                  CONSTANTINTD: 10
                              BlockItems (21)
                                Exp_Stmt (21)
                                  funcall (21)
                                    IDENTIFIER putch
                                    FuncRParams (21)
                                      LVal_EXP (21)
                                        LVal (21)
                                          IDENTIFIER newline
                                          ArrayExps (21)
                                BlockItems (22)
                                  Return_Stmt (22)
                                    LVal_EXP (22)
                                      LVal (22)
                                        IDENTIFIER s
                                        ArrayExps (22)


===========================================================
Global
ID             category       type           depictor
               
n              Variable       TYPEINTEGER    NULL           
a              Array          TYPEINTEGER    ----------> dim=1
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
===========================================================
Local:main
ID             category       type           depictor
              
s              Variable       TYPEINTEGER    NULL           
i              Variable       TYPEINTEGER    NULL           
               Block          BLOCKStmt      NULL           
newline        Variable       TYPEINTEGER    NULL           
===========================================================
789
789
789
789
789
789
789
789
TraverseScopeStack no result
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
456
789
789
789
789
789
789
456
789
789
789
789
789
456
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
TraverseScopeStack no result
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
TraverseScopeStack no result
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
TraverseScopeStack no result
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456

~~~~TAC~~~~~
 No  Source Position	TACCode
_______________________________________
  0  (at line   0)	CALL main

  1  (at line   4)	FUNCTION main :
  2  (at line   6)	_t0 := CALL 
  3  (at line   6)	n := _t0
  4  (at line   7)	_t1 := n
  5  (at line   7)	_t4 := #10
  6  (at line   7)	IF _t1 > _t4 GOTO label0
  7  (at line   7)	GOTO label1
  8  (at line   7)	LABEL label0 :
  9  (at line   8)	_t5 := #1
 10  (at line   8)	RETURN _t5
 11  (at line   7)	LABEL label1 :
 12  (at line  11)	_t6 := #0
 13  (at line  11)	i := _t6
 14  (at line  12)	_t7 := i
 15  (at line  12)	s := _t7
 16  (at line  13)	LABEL label2 :
 17  (at line  13)	_t8 := i
 18  (at line  13)	_t11 := n
 19  (at line  13)	IF _t8 < _t11 GOTO label3
 20  (at line  13)	GOTO label4
 21  (at line  13)	LABEL label3 :
 22  (at line  14)	_t12 := CALL 
 23  (at line  14)	_t15 := i
 24  (at line  14)	a[_t15] := _t12
 25  (at line  15)	_t18 := s
 26  (at line  15)	_t22 := i
 27  (at line  15)	_t19 := a[_t22]
 28  (at line  15)	_t17 := _t18 + _t19
 29  (at line  15)	s := _t17
 30  (at line  16)	_t25 := i
 31  (at line  16)	_t26 := #1
 32  (at line  16)	_t24 := _t25 + _t26
 33  (at line  16)	i := _t24
 34  (at line  13)	GOTO label2
 35  (at line  13)	LABEL label4 :
 36  (at line  18)	_t27 := s
 37  (at line  18)	ARG _t27
 38  (at line  18)	CALL 
 39  (at line  20)	_t28 := #10
 40  (at line  20)	newline := _t28
 41  (at line  21)	_t29 := newline
 42  (at line  21)	ARG _t29
 43  (at line  21)	CALL 
 44  (at line  22)	_t30 := s
 45  (at line  22)	RETURN _t30


===========================================================
Global
ID             category       type           depictor
               
n              Variable       TYPEINTEGER    NULL           
a              Array          TYPEINTEGER    ----------> dim=1
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
scope type is wrong
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build assembly code
tac type FUNCTIONDF
Variable offset count+4 :s
Variable offset count+4 :s
Variable offset count+4 :s
Variable offset count+4 :s
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t0
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t1
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t4
Variable offset count+4 :_t5
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t6
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t7
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t8
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t11
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t12
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t13
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t14
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t15
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t16
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t17
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t18
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t19
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t20
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t21
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t22
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t23
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t24
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t25
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t26
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t27
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t28
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t29
Variable offset count+4 :_t30
tac type CALLASSIGN
findregister: insldr rd=0,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=1,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=2,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=3,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFGT
ControlInstruction String: ControlInstruction tostring
INS B tostring
BGT L0

tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L1

tac type LABELDF
L0:

tec type ASSIGN
findregister: insldr rd=4,r1=11,r2 offset=0,op2type=1, insefft=0
tac type RETURN
tac type ARG
tac type LABELDF
L1:

tec type ASSIGN
findregister: insldr rd=5,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=6,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=8,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=9,r1=11,r2 offset=0,op2type=1, insefft=0
tac type LABELDF
L2:

tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFLT
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L4

tac type LABELDF
L3:

tac type CALLASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
compiler: ./ObjectCode/Arm.cpp:32: ARM::ARM(TACCode *, ScopeItem &): Assertion `code.dest.Type==VARIABLE' failed.
Aborted (core dumped)
