arg S
--(end of buffer or a NUL)
--accepting rule at line 74 ("// factorial number
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("r")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("fac")
--accepting rule at line 80 ("(")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("x")
--accepting rule at line 81 (")")
--accepting rule at line 115 ("
")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 101 ("if")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("x")
--accepting rule at line 114 (" ")
--accepting rule at line 96 ("<")
<int>
<id,a>
<;>
<int>
<id,r>
<;>
<int>
<id,fac>
<(>
<int>
<id,x>
<)>
<{>
<if>
<(>
<id,x>
<<>
33333333333
--accepting rule at line 109 ("2")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 ("	")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<intd>
ExpNumber:0
<)>
<return>
<intd>
ExpNumber:0
<;>
<id,a>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("x")
--accepting rule at line 114 (" ")
--accepting rule at line 85 ("-")
Lval
<id,x>
<->
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("r")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,r>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("fac")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("a")
--accepting rule at line 81 (")")
Lval
<id,fac>
<(>
<id,a>
<)>
33333333333
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("r")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<;>
stmt1
<id,r>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("x")
--accepting rule at line 114 (" ")
--accepting rule at line 86 ("*")
Lval
<id,x>
<*>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("r")
--accepting rule at line 75 (";")
Lval
<id,r>
<;>
33333333333
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("r")
--accepting rule at line 75 (";")
Lval
stmt1
<return>
<id,r>
<;>
33333333333
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<}>
<int>
<id,main>
<(>
<)>
<{>
<int>
<id,a>
<;>
<id,a>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("5")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("fac")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("a")
--accepting rule at line 81 (")")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<return>
<id,fac>
<(>
<id,a>
<)>
33333333333
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--(end of buffer or a NUL)
--EOF (start condition 0)
Lval
<;>
<}>
CompUnits (2)
  VarDecl (2)
    IDENTIFIER a
  CompUnits (3)
    VarDecl (3)
      IDENTIFIER r
    CompUnits (4)
      FuncDef (4)
        FuncFParam (4)
        Block (6)
          BlockItems (6)
            IF_Stmt (6)
              Cond (6)
                OPLIGHT (6)
                  LVal_EXP (6)
                    LVal (6)
                      IDENTIFIER x
                      ArrayExps (6)
                  IntConst (6)
                    CONSTANTINTD: 2
              Return_Stmt (7)
                IntConst (7)
                  CONSTANTINTD: 1
            BlockItems (8)
              Lval_Opassign_Stmt (8)
                LVal (8)
                  IDENTIFIER a
                  ArrayExps (8)
                MINUSExp (8)
                  LVal_EXP (8)
                    LVal (8)
                      IDENTIFIER x
                      ArrayExps (8)
                  IntConst (8)
                    CONSTANTINTD: 1
              BlockItems (9)
                Lval_Opassign_Stmt (9)
                  LVal (9)
                    IDENTIFIER r
                    ArrayExps (9)
                  funcall (9)
                    IDENTIFIER fac
                    FuncRParams (9)
                      LVal_EXP (9)
                        LVal (9)
                          IDENTIFIER a
                          ArrayExps (9)
                BlockItems (10)
                  Lval_Opassign_Stmt (10)
                    LVal (10)
                      IDENTIFIER r
                      ArrayExps (10)
                    MulExp (10)
                      LVal_EXP (10)
                        LVal (10)
                          IDENTIFIER x
                          ArrayExps (10)
                      LVal_EXP (10)
                        LVal (10)
                          IDENTIFIER r
                          ArrayExps (10)
                  BlockItems (11)
                    Return_Stmt (11)
                      LVal_EXP (11)
                        LVal (11)
                          IDENTIFIER r
                          ArrayExps (11)
      CompUnits (14)
        FuncDef (14)
          NOFParam (14)
          Block (15)
            BlockItems (15)
              VarDecl (15)
                IDENTIFIER a
              BlockItems (16)
                Lval_Opassign_Stmt (16)
                  LVal (16)
                    IDENTIFIER a
                    ArrayExps (16)
                  IntConst (16)
                    CONSTANTINTD: 5
                BlockItems (17)
                  Return_Stmt (17)
                    funcall (17)
                      IDENTIFIER fac
                      FuncRParams (17)
                        LVal_EXP (17)
                          LVal (17)
                            IDENTIFIER a
                            ArrayExps (17)


===========================================================
Global
ID             category       type           depictor
               
a              Variable       TYPEINTEGER    NULL           
r              Variable       TYPEINTEGER    NULL           
fac            Function       TYPEINTEGER    NOT NULL       
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Formal:fac
ID             category       type           depictor
              
x              Variable       TYPEINTEGER    NULL           
===========================================================
===========================================================
Local:fac
ID             category       type           depictor
              
===========================================================
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
===========================================================
Local:main
ID             category       type           depictor
              
a              Variable       TYPEINTEGER    NULL           
===========================================================
456
456
789
789
789
789
789
456
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
456
789
789
456
789
789
456

~~~~TAC~~~~~
 No  Source Position	TACCode
_______________________________________
  0  (at line   0)	CALL main

  1  (at line   4)	FUNCTION fac :
  2  (at line   4)	PARAM x
  3  (at line   6)	_t0 := x
  4  (at line   6)	_t3 := #2
  5  (at line   6)	IF _t0 < _t3 GOTO label0
  6  (at line   6)	GOTO label1
  7  (at line   6)	LABEL label0 :
  8  (at line   7)	_t4 := #1
  9  (at line   7)	RETURN _t4
 10  (at line   6)	LABEL label1 :
 11  (at line   8)	_t6 := x
 12  (at line   8)	_t7 := #1
 13  (at line   8)	_t5 := _t6 - _t7
 14  (at line   8)	a := _t5
 15  (at line   9)	_t9 := a
 16  (at line   9)	ARG _t9
 17  (at line   9)	_t8 := CALL fac
 18  (at line   9)	r := _t8
 19  (at line  10)	_t11 := x
 20  (at line  10)	_t12 := r
 21  (at line  10)	_t10 := _t11 * _t12
 22  (at line  10)	r := _t10
 23  (at line  11)	_t13 := r
 24  (at line  11)	RETURN _t13

 25  (at line  14)	FUNCTION main :
 26  (at line  16)	_t14 := #5
 27  (at line  16)	a := _t14
 28  (at line  17)	_t16 := a
 29  (at line  17)	ARG _t16
 30  (at line  17)	_t15 := CALL fac
 31  (at line  17)	RETURN _t15


===========================================================
Global
ID             category       type           depictor
               
a              Variable       TYPEINTEGER    NULL           
r              Variable       TYPEINTEGER    NULL           
fac            Function       TYPEINTEGER    NOT NULL       
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Formal:fac
ID             category       type           depictor
              
x              Variable       TYPEINTEGER    NULL           
===========================================================
===========================================================
Local:fac
ID             category       type           depictor
              
===========================================================
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
scope type is wrong
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build assembly code
tac type FUNCTIONDF
tec type ASSIGN
findregister: insldr rd=0,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=1,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=2,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFLT
tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L1

tac type LABELDF
L0:

tec type ASSIGN
findregister: insldr rd=3,r1=11,r2 offset=0,op2type=1, insefft=0
tac type RETURN
tac type ARG
tac type LABELDF
L1:

tec type ASSIGN
findregister: insldr rd=4,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=5,r1=11,r2 offset=0,op2type=1, insefft=0
tac type SUB
compiler: ./ObjectCode/Arm.cpp:85: ARM::ARM(TACCode *, ScopeItem &): Assertion `code.dest.Type = VARIABLE' failed.
Aborted (core dumped)
