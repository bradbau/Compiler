arg S
--(end of buffer or a NUL)
--accepting rule at line 74 ("// Count all the word in the string
")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("wc")
--accepting rule at line 80 ("(")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("string")
--accepting rule at line 82 ("[")
--accepting rule at line 83 ("]")
--accepting rule at line 76 (",")
<int>
<id,wc>
<(>
<int>
<id,string>
<[>
<]>
<,>
33333333333
1111111111111111
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("inWord")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("count")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
<int>
<id,n>
<)>
<{>
<int>
<id,inWord>
<;>
<int>
<id,i>
<;>
<int>
<id,count>
<;>
<id,i>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("inWord")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<into>
ExpNumber:0
<;>
stmt1
<id,inWord>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("count")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<into>
ExpNumber:0
<;>
stmt1
<id,count>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 103 ("while")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 96 ("<")
Lval
<into>
ExpNumber:0
<;>
stmt1
<while>
<(>
<id,i>
<<>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("n")
--accepting rule at line 81 (")")
Lval
<id,n>
<)>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 101 ("if")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("string")
--accepting rule at line 82 ("[")
--accepting rule at line 112 ("i")
--accepting rule at line 83 ("]")
Lval
<{>
<if>
<(>
<id,string>
<[>
<id,i>
<]>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 94 ("!=")
Lval
<!=>
33333333333
22222222222222
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("32")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 101 ("if")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("inWord")
--accepting rule at line 114 (" ")
--accepting rule at line 93 ("==")
Lval
<intd>
ExpNumber:0
<)>
<{>
<if>
<(>
<id,inWord>
<==>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("count")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<into>
ExpNumber:0
<)>
<{>
<id,count>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("count")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
Lval
<id,count>
<+>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("inWord")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<id,inWord>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 114 (" ")
--accepting rule at line 102 ("else")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("inWord")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<}>
<else>
<{>
<id,inWord>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<into>
ExpNumber:0
<;>
stmt1
<}>
<id,i>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
Lval
<id,i>
<+>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("count")
--accepting rule at line 75 (";")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<return>
<id,count>
<;>
33333333333
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("string")
--accepting rule at line 82 ("[")
--accepting rule at line 109 ("500")
--accepting rule at line 83 ("]")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("temp")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<}>
<int>
<id,main>
<(>
<)>
<{>
<int>
<id,string>
<[>
<intd>
ExpNumber:0
<]>
<;>
<int>
<id,temp>
<;>
<int>
<id,i>
<;>
<id,i>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("temp")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<into>
ExpNumber:0
<;>
stmt1
<id,temp>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 103 ("while")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("temp")
--accepting rule at line 114 (" ")
--accepting rule at line 94 ("!=")
Lval
<into>
ExpNumber:0
<;>
stmt1
<while>
<(>
<id,temp>
<!=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("10")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("temp")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<intd>
ExpNumber:0
<)>
<{>
<id,temp>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("getch")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("string")
--accepting rule at line 82 ("[")
--accepting rule at line 112 ("i")
--accepting rule at line 83 ("]")
Lval
<id,getch>
<(>
<)>
<;>
stmt1
<id,string>
<[>
<id,i>
<]>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<=>
33333333333
22222222222222
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("temp")
--accepting rule at line 75 (";")
Lval
<id,temp>
<;>
33333333333
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
stmt1
<id,i>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
Lval
<id,i>
<+>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("temp")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<id,temp>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("wc")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("string")
--accepting rule at line 76 (",")
Lval
<id,wc>
<(>
<id,string>
<,>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 81 (")")
Lval
<id,i>
<)>
33333333333
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("putint")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("temp")
--accepting rule at line 81 (")")
Lval
<;>
stmt1
<id,putint>
<(>
<id,temp>
<)>
33333333333
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
Lval
<;>
<return>
<into>
ExpNumber:0
<;>
<}>
CompUnits (3)
  FuncDef (3)
    FuncFParams (3)
      FuncFParam (3)
        ArrayExps (3)
      FuncFParam (3)
    Block (4)
      BlockItems (4)
        VarDecl (4)
          IDENTIFIER inWord
        BlockItems (5)
          VarDecl (5)
            IDENTIFIER i
          BlockItems (6)
            VarDecl (6)
              IDENTIFIER count
            BlockItems (7)
              Lval_Opassign_Stmt (7)
                LVal (7)
                  IDENTIFIER i
                  ArrayExps (7)
                IntConst (7)
                  CONSTANTOCT: 0
              BlockItems (8)
                Lval_Opassign_Stmt (8)
                  LVal (8)
                    IDENTIFIER inWord
                    ArrayExps (8)
                  IntConst (8)
                    CONSTANTOCT: 0
                BlockItems (9)
                  Lval_Opassign_Stmt (9)
                    LVal (9)
                      IDENTIFIER count
                      ArrayExps (9)
                    IntConst (9)
                      CONSTANTOCT: 0
                  BlockItems (10)
                    While_Stmt (10)
                      Cond (10)
                        OPLIGHT (10)
                          LVal_EXP (10)
                            LVal (10)
                              IDENTIFIER i
                              ArrayExps (10)
                          LVal_EXP (10)
                            LVal (10)
                              IDENTIFIER n
                              ArrayExps (10)
                      Block_Stmt (11)
                        Block (11)
                          BlockItems (11)
                            IF_ELSE_Stmt (11)
                              Cond (11)
                                OPNOTEQUAL (11)
                                  LVal_EXP (11)
                                    LVal (11)
                                      IDENTIFIER string
                                      ArrayExps (11)
                                        LVal_EXP (11)
                                          LVal (11)
                                            IDENTIFIER i
                                            ArrayExps (11)
                                        ArrayExps (11)
                                  IntConst (11)
                                    CONSTANTINTD: 32
                              Block_Stmt (12)
                                Block (12)
                                  BlockItems (12)
                                    IF_Stmt (12)
                                      Cond (12)
                                        OPEQUAL (12)
                                          LVal_EXP (12)
                                            LVal (12)
                                              IDENTIFIER inWord
                                              ArrayExps (12)
                                          IntConst (12)
                                            CONSTANTOCT: 0
                                      Block_Stmt (13)
                                        Block (13)
                                          BlockItems (13)
                                            Lval_Opassign_Stmt (13)
                                              LVal (13)
                                                IDENTIFIER count
                                                ArrayExps (13)
                                              PLUSExp (13)
                                                LVal_EXP (13)
                                                  LVal (13)
                                                    IDENTIFIER count
                                                    ArrayExps (13)
                                                IntConst (13)
                                                  CONSTANTINTD: 1
                                            BlockItems (14)
                                              Lval_Opassign_Stmt (14)
                                                LVal (14)
                                                  IDENTIFIER inWord
                                                  ArrayExps (14)
                                                IntConst (14)
                                                  CONSTANTINTD: 1
                              Block_Stmt (17)
                                Block (17)
                                  BlockItems (17)
                                    Lval_Opassign_Stmt (17)
                                      LVal (17)
                                        IDENTIFIER inWord
                                        ArrayExps (17)
                                      IntConst (17)
                                        CONSTANTOCT: 0
                            BlockItems (19)
                              Lval_Opassign_Stmt (19)
                                LVal (19)
                                  IDENTIFIER i
                                  ArrayExps (19)
                                PLUSExp (19)
                                  LVal_EXP (19)
                                    LVal (19)
                                      IDENTIFIER i
                                      ArrayExps (19)
                                  IntConst (19)
                                    CONSTANTINTD: 1
                    BlockItems (21)
                      Return_Stmt (21)
                        LVal_EXP (21)
                          LVal (21)
                            IDENTIFIER count
                            ArrayExps (21)
  CompUnits (24)
    FuncDef (24)
      NOFParam (24)
      Block (25)
        BlockItems (25)
          VarDecl (25)
            ArrayDec: demmision=0
              IDENTIFIER string
          BlockItems (26)
            VarDecl (26)
              IDENTIFIER temp
            BlockItems (27)
              VarDecl (27)
                IDENTIFIER i
              BlockItems (28)
                Lval_Opassign_Stmt (28)
                  LVal (28)
                    IDENTIFIER i
                    ArrayExps (28)
                  IntConst (28)
                    CONSTANTOCT: 0
                BlockItems (29)
                  Lval_Opassign_Stmt (29)
                    LVal (29)
                      IDENTIFIER temp
                      ArrayExps (29)
                    IntConst (29)
                      CONSTANTOCT: 0
                  BlockItems (30)
                    While_Stmt (30)
                      Cond (30)
                        OPNOTEQUAL (30)
                          LVal_EXP (30)
                            LVal (30)
                              IDENTIFIER temp
                              ArrayExps (30)
                          IntConst (30)
                            CONSTANTINTD: 10
                      Block_Stmt (31)
                        Block (31)
                          BlockItems (31)
                            Lval_Opassign_Stmt (31)
                              LVal (31)
                                IDENTIFIER temp
                                ArrayExps (31)
                              funcall (31)
                                IDENTIFIER getch
                            BlockItems (32)
                              Lval_Opassign_Stmt (32)
                                LVal (32)
                                  IDENTIFIER string
                                  ArrayExps (32)
                                    LVal_EXP (32)
                                      LVal (32)
                                        IDENTIFIER i
                                        ArrayExps (32)
                                    ArrayExps (32)
                                LVal_EXP (32)
                                  LVal (32)
                                    IDENTIFIER temp
                                    ArrayExps (32)
                              BlockItems (33)
                                Lval_Opassign_Stmt (33)
                                  LVal (33)
                                    IDENTIFIER i
                                    ArrayExps (33)
                                  PLUSExp (33)
                                    LVal_EXP (33)
                                      LVal (33)
                                        IDENTIFIER i
                                        ArrayExps (33)
                                    IntConst (33)
                                      CONSTANTINTD: 1
                    BlockItems (35)
                      Lval_Opassign_Stmt (35)
                        LVal (35)
                          IDENTIFIER temp
                          ArrayExps (35)
                        funcall (35)
                          IDENTIFIER wc
                          FuncRParams (35)
                            LVal_EXP (35)
                              LVal (35)
                                IDENTIFIER string
                                ArrayExps (35)
                            Exps (35)
                              LVal_EXP (35)
                                LVal (35)
                                  IDENTIFIER i
                                  ArrayExps (35)
                      BlockItems (36)
                        Exp_Stmt (36)
                          funcall (36)
                            IDENTIFIER putint
                            FuncRParams (36)
                              LVal_EXP (36)
                                LVal (36)
                                  IDENTIFIER temp
                                  ArrayExps (36)
                        BlockItems (37)
                          Return_Stmt (37)
                            IntConst (37)
                              CONSTANTOCT: 0


===========================================================
Global
ID             category       type           depictor
               
wc             Function       TYPEINTEGER    NOT NULL       
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Formal:wc
ID             category       type           depictor
              
string         Array          TYPEINTEGER    ----------> dim=1
n              Variable       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Local:wc
ID             category       type           depictor
              
inWord         Variable       TYPEINTEGER    NULL           
i              Variable       TYPEINTEGER    NULL           
count          Variable       TYPEINTEGER    NULL           
               Block          BLOCKStmt      NOT NULL       
===========================================================
===========================================================
Local:block
ID             category       type           depictor
              
               Block          BLOCKStmt      NOT NULL       
               Block          BLOCKStmt      NULL           
===========================================================
===========================================================
Local:block
ID             category       type           depictor
              
               Block          BLOCKStmt      NULL           
===========================================================
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
===========================================================
Local:main
ID             category       type           depictor
              
string         Array          TYPEINTEGER    ----------> dim=1
temp           Variable       TYPEINTEGER    NULL           
i              Variable       TYPEINTEGER    NULL           
               Block          BLOCKStmt      NULL           
===========================================================
789
456
789
456
789
789
789
789
456
789
789
789
789
456
789
789
789
789
456
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
123
789
789
789
789
789
789
789
789
789
789
123
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
456
789
789
456
789
789
456
789
789
789
456
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
TraverseScopeStack no result
789
789
789
789
789
456
789
789
789
789
789
789
456
789
789
789
789
789
789
456
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
TraverseScopeStack no result
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
789
456

~~~~TAC~~~~~
 No  Source Position	TACCode
_______________________________________
  0  (at line   0)	CALL main

  1  (at line   3)	FUNCTION wc :
  2  (at line   3)	PARAM string
  3  (at line   3)	PARAM n
  4  (at line   7)	_t0 := #0
  5  (at line   7)	i := _t0
  6  (at line   8)	_t1 := #0
  7  (at line   8)	inWord := _t1
  8  (at line   9)	_t2 := #0
  9  (at line   9)	count := _t2
 10  (at line  10)	LABEL label0 :
 11  (at line  10)	_t3 := i
 12  (at line  10)	_t6 := n
 13  (at line  10)	IF _t3 < _t6 GOTO label1
 14  (at line  10)	GOTO label2
 15  (at line  10)	LABEL label1 :
 16  (at line  11)	_t12 := i
 17  (at line  11)	_t7 := string[_t12]
 18  (at line  11)	_t14 := #32
 19  (at line  11)	IF _t7 != _t14 GOTO label3
 20  (at line  11)	GOTO label4
 21  (at line  11)	LABEL label3 :
 22  (at line  12)	_t15 := inWord
 23  (at line  12)	_t18 := #0
 24  (at line  12)	IF _t15 = _t18 GOTO label5
 25  (at line  12)	GOTO label6
 26  (at line  12)	LABEL label5 :
 27  (at line  13)	_t20 := count
 28  (at line  13)	_t21 := #1
 29  (at line  13)	_t19 := _t20 + _t21
 30  (at line  13)	count := _t19
 31  (at line  14)	_t22 := #1
 32  (at line  14)	inWord := _t22
 33  (at line  12)	LABEL label6 :
 34  (at line  11)	GOTO label7
 35  (at line  11)	LABEL label4 :
 36  (at line  17)	_t23 := #0
 37  (at line  17)	inWord := _t23
 38  (at line  11)	LABEL label7 :
 39  (at line  19)	_t25 := i
 40  (at line  19)	_t26 := #1
 41  (at line  19)	_t24 := _t25 + _t26
 42  (at line  19)	i := _t24
 43  (at line  10)	GOTO label0
 44  (at line  10)	LABEL label2 :
 45  (at line  21)	_t27 := count
 46  (at line  21)	RETURN _t27

 47  (at line  24)	FUNCTION main :
 48  (at line  28)	_t28 := #0
 49  (at line  28)	i := _t28
 50  (at line  29)	_t29 := #0
 51  (at line  29)	temp := _t29
 52  (at line  30)	LABEL label8 :
 53  (at line  30)	_t30 := temp
 54  (at line  30)	_t33 := #10
 55  (at line  30)	IF _t30 != _t33 GOTO label9
 56  (at line  30)	GOTO label10
 57  (at line  30)	LABEL label9 :
 58  (at line  31)	_t34 := CALL 
 59  (at line  31)	temp := _t34
 60  (at line  32)	_t35 := temp
 61  (at line  32)	_t38 := i
 62  (at line  32)	string[_t38] := _t35
 63  (at line  33)	_t41 := i
 64  (at line  33)	_t42 := #1
 65  (at line  33)	_t40 := _t41 + _t42
 66  (at line  33)	i := _t40
 67  (at line  30)	GOTO label8
 68  (at line  30)	LABEL label10 :
 69  (at line  25)	_t45 := #500
 70  (at line  35)	_t46 := i
 71  (at line  35)	ARG _t46
 72  (at line  35)	ARG string[_t45]
 73  (at line  35)	_t43 := CALL wc
 74  (at line  35)	temp := _t43
 75  (at line  36)	_t47 := temp
 76  (at line  36)	ARG _t47
 77  (at line  36)	CALL 
 78  (at line  37)	_t48 := #0
 79  (at line  37)	RETURN _t48


===========================================================
Global
ID             category       type           depictor
               
wc             Function       TYPEINTEGER    NOT NULL       
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Formal:wc
ID             category       type           depictor
              
string         Array          TYPEINTEGER    ----------> dim=1
n              Variable       TYPEINTEGER    NOT NULL       
scope type is wrong
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
scope type is wrong
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build assembly code
tac type FUNCTIONDF
Variable offset count+4 :inWord
Variable offset count+4 :inWord
Variable offset count+4 :inWord
Variable offset count+4 :inWord
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t0
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t1
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t2
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t3
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t6
Variable offset count+4 :_t27
tec type ASSIGN
findregister: insldr rd=0,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=1,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=2,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=3,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=4,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=5,r1=11,r2 offset=0,op2type=1, insefft=0
tac type LABELDF
L0:

tec type ASSIGN
findregister: insldr rd=6,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=8,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=9,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFLT
tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L2

tac type LABELDF
L1:

tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFNEQ
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L4

tac type LABELDF
L3:

tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFEQ
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L6

tac type LABELDF
L5:

tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type ADD
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
tac type LABELDF
L6:

tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L7

tac type LABELDF
L4:

tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
tac type LABELDF
L7:

tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type ADD
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L0

tac type LABELDF
L2:

tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type RETURN
tac type ARG
tac type FUNCTIONDF
Variable offset count+4 :string
Variable offset count+4 :string
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t28
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t29
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t30
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t33
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t34
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t35
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t36
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t37
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t38
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t39
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t40
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t41
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t42
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t43
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t45
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t46
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t47
Variable offset count+4 :_t48
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type LABELDF
L8:

tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFNEQ
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L10

tac type LABELDF
L9:

tac type CALLASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
compiler: ./ObjectCode/Arm.cpp:32: ARM::ARM(TACCode *, ScopeItem &): Assertion `code.dest.Type==VARIABLE' failed.
Aborted (core dumped)
