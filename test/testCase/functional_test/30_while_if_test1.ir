--(end of buffer or a NUL)
--accepting rule at line 74 ("// test while-if
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("whileIf")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 103 ("while")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 96 ("<")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("100")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 101 ("if")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 93 ("==")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("5")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("25")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 102 ("else")
--accepting rule at line 114 (" ")
--accepting rule at line 101 ("if")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 93 ("==")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("10")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("42")
--accepting rule at line 75 (";")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 102 ("else")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("b")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 86 ("*")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("2")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
<int>
<id,whileIf>
<(>
<)>
<{>
<int>
<id,a>
<;>
<id,a>
<=>
Lval
<into>
ExpNumber:0
<;>
stmt1
<int>
<id,b>
<;>
<id,b>
<=>
Lval
<into>
ExpNumber:0
<;>
stmt1
<while>
<(>
<id,a>
<<>
Lval
<intd>
ExpNumber:0
<)>
<{>
<if>
<(>
<id,a>
<==>
Lval
<intd>
ExpNumber:0
<)>
<{>
<id,b>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<else>
<if>
<(>
<id,a>
<==>
Lval
<intd>
ExpNumber:0
<)>
<{>
<id,b>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<else>
<{>
<id,b>
<=>
Lval
<id,a>
<*>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<id,a>
<=>
Lval--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("b")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 115 ("
")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("whileIf")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)

<id,a>
<+>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<return>
<(>
<id,b>
<)>
Lval
<;>
<}>
<int>
<id,main>
<(>
<)>
<{>
<return>
<(>
<id,whileIf>
<(>
<)>
<)>
<;>
<}>
CompUnits (2)
  FuncDef (2)
    NOFParam (2)
    Block (3)
      BlockItems (3)
        VarDecl (3)
          IDENTIFIER a
        BlockItems (4)
          Lval_Opassign_Stmt (4)
            LVal (4)
              IDENTIFIER a
              ArrayExps (4)
            IntConst (4)
              CONSTANTOCT: 0
          BlockItems (5)
            VarDecl (5)
              IDENTIFIER b
            BlockItems (6)
              Lval_Opassign_Stmt (6)
                LVal (6)
                  IDENTIFIER b
                  ArrayExps (6)
                IntConst (6)
                  CONSTANTOCT: 0
              BlockItems (7)
                While_Stmt (7)
                  Cond (7)
                    OPLIGHT (7)
                      LVal_EXP (7)
                        LVal (7)
                          IDENTIFIER a
                          ArrayExps (7)
                      IntConst (7)
                        CONSTANTINTD: 100
                  Block_Stmt (8)
                    Block (8)
                      BlockItems (8)
                        IF_ELSE_Stmt (8)
                          Cond (8)
                            OPEQUAL (8)
                              LVal_EXP (8)
                                LVal (8)
                                  IDENTIFIER a
                                  ArrayExps (8)
                              IntConst (8)
                                CONSTANTINTD: 5
                          Block_Stmt (9)
                            Block (9)
                              BlockItems (9)
                                Lval_Opassign_Stmt (9)
                                  LVal (9)
                                    IDENTIFIER b
                                    ArrayExps (9)
                                  IntConst (9)
                                    CONSTANTINTD: 25
                          IF_ELSE_Stmt (11)
                            Cond (11)
                              OPEQUAL (11)
                                LVal_EXP (11)
                                  LVal (11)
                                    IDENTIFIER a
                                    ArrayExps (11)
                                IntConst (11)
                                  CONSTANTINTD: 10
                            Block_Stmt (12)
                              Block (12)
                                BlockItems (12)
                                  Lval_Opassign_Stmt (12)
                                    LVal (12)
                                      IDENTIFIER b
                                      ArrayExps (12)
                                    IntConst (12)
                                      CONSTANTINTD: 42
                            Block_Stmt (15)
                              Block (15)
                                BlockItems (15)
                                  Lval_Opassign_Stmt (15)
                                    LVal (15)
                                      IDENTIFIER b
                                      ArrayExps (15)
                                    MulExp (15)
                                      LVal_EXP (15)
                                        LVal (15)
                                          IDENTIFIER a
                                          ArrayExps (15)
                                      IntConst (15)
                                        CONSTANTINTD: 2
                        BlockItems (17)
                          Lval_Opassign_Stmt (17)
                            LVal (17)
                              IDENTIFIER a
                              ArrayExps (17)
                            PLUSExp (17)
                              LVal_EXP (17)
                                LVal (17)
                                  IDENTIFIER a
                                  ArrayExps (17)
                              IntConst (17)
                                CONSTANTINTD: 1
                BlockItems (19)
                  Return_Stmt (19)
                    (Exp) (19)
                      LVal_EXP (19)
                        LVal (19)
                          IDENTIFIER b
                          ArrayExps (19)
  CompUnits (23)
    FuncDef (23)
      NOFParam (23)
      Block (24)
        BlockItems (24)
          Return_Stmt (24)
            (Exp) (24)
              funcall (24)
                IDENTIFIER whileIf


===========================================================
Global
ID             category       type           depictor
               
whileIf        Function       TYPEINTEGER    NOT NULL       
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
Formal:whileIf
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
Local:whileIf
ID             category       type           depictor
              
a              Variable       TYPEINTEGER    NULL           
b              Variable       TYPEINTEGER    NULL           
               Block          BLOCKStmt      NOT NULL       
===========================================================
Local:block
ID             category       type           depictor
              
               Block          BLOCKStmt      NULL           
               Block          BLOCKStmt      NULL           
               Block          BLOCKStmt      NULL           
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NULL           
===========================================================
Local:main
ID             category       type           depictor
              
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result

~~~~TAC~~~~~
 No  Source Position	TACCode
_______________________________________
  0  (at line   0)	CALL main

  1  (at line   2)	FUNCTION whileIf :
  2  (at line   4)	_t25 := #0
  3  (at line   4)	 := _t25
  4  (at line   6)	_t24 := #0
  5  (at line   6)	 := _t24
  6  (at line   7)	LABEL label0 :
  7  (at line   7)	_t4 := 
  8  (at line   7)	_t7 := #100
  9  (at line   7)	IF _t4 < _t7 GOTO label1
 10  (at line   7)	GOTO label2
 11  (at line   7)	LABEL label1 :
 12  (at line   8)	_t11 := 
 13  (at line   8)	_t14 := #5
 14  (at line   8)	IF _t11 = _t14 GOTO label3
 15  (at line   8)	GOTO label4
 16  (at line   8)	LABEL label3 :
 17  (at line   9)	_t15 := #25
 18  (at line   9)	 := _t15
 19  (at line   8)	GOTO label5
 20  (at line   8)	LABEL label4 :
 21  (at line  11)	_t16 := 
 22  (at line  11)	_t19 := #10
 23  (at line  11)	IF _t16 = _t19 GOTO label6
 24  (at line  11)	GOTO label7
 25  (at line  11)	LABEL label6 :
 26  (at line  12)	_t20 := #42
 27  (at line  12)	 := _t20
 28  (at line  11)	GOTO label8
 29  (at line  11)	LABEL label7 :
 30  (at line  15)	_t22 := 
 31  (at line  15)	_t23 := #2
 32  (at line  15)	_t21 := _t22 * _t23
 33  (at line  15)	 := _t21
 34  (at line  11)	LABEL label8 :
 35  (at line   8)	LABEL label5 :
 36  (at line  17)	_t9 := 
 37  (at line  17)	_t10 := #1
 38  (at line  17)	_t8 := _t9 + _t10
 39  (at line  17)	 := _t8
 40  (at line   7)	GOTO label0
 41  (at line   7)	LABEL label2 :
 42  (at line  19)	_t3 := 
 43  (at line  19)	_t2 := _t3
 44  (at line  19)	RETURN _t2

 45  (at line compiler: ./ObjectCode/Arm.cpp:72: ARM::ARM(TACCode*, ScopeItem&): Assertion `code.dest.Type = VARIABLE' failed.
Aborted (core dumped)
