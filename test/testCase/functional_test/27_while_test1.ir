--(end of buffer or a NUL)
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("doubleWhile")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("5")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("j")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("j")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("7")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 103 ("while")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 96 ("<")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("100")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("30")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 103 ("while")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("j")
--accepting rule at line 114 (" ")
--accepting rule at line 96 ("<")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("100")
--accepting rule at line 81 (")")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("j")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("j")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("6")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("j")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("j")
--accepting rule at line 114 (" ")
--accepting rule at line 85 ("-")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("100")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("j")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
<int>
<id,doubleWhile>
<(>
<)>
<{>
<int>
<id,i>
<;>
<id,i>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<int>
<id,j>
<;>
<id,j>
<=>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<while>
<(>
<id,i>
<<>
Lval
<intd>
ExpNumber:0
<)>
<{>
<id,i>
<=>
Lval
<id,i>
<+>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<while>
<(>
<id,j>
<<>
Lval
<intd>
ExpNumber:0
<)>
<{>
<id,j>
<=>
Lval
<id,j>
<+>
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<id,j>
<=>
Lval
<id,j>
<->
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<return>
<(>
<id,j>
<)>
Lval
<;>
<}>
<int>
<id,main>--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("doubleWhile")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)

<(>
<)>
<{>
<return>
<id,doubleWhile>
<(>
<)>
<;>
<}>
CompUnits (1)
  FuncDef (1)
    NOFParam (1)
    Block (2)
      BlockItems (2)
        VarDecl (2)
          IDENTIFIER i
        BlockItems (3)
          Lval_Opassign_Stmt (3)
            LVal (3)
              IDENTIFIER i
              ArrayExps (3)
            IntConst (3)
              CONSTANTINTD: 5
          BlockItems (4)
            VarDecl (4)
              IDENTIFIER j
            BlockItems (5)
              Lval_Opassign_Stmt (5)
                LVal (5)
                  IDENTIFIER j
                  ArrayExps (5)
                IntConst (5)
                  CONSTANTINTD: 7
              BlockItems (6)
                While_Stmt (6)
                  Cond (6)
                    OPLIGHT (6)
                      LVal_EXP (6)
                        LVal (6)
                          IDENTIFIER i
                          ArrayExps (6)
                      IntConst (6)
                        CONSTANTINTD: 100
                  Block_Stmt (7)
                    Block (7)
                      BlockItems (7)
                        Lval_Opassign_Stmt (7)
                          LVal (7)
                            IDENTIFIER i
                            ArrayExps (7)
                          PLUSExp (7)
                            LVal_EXP (7)
                              LVal (7)
                                IDENTIFIER i
                                ArrayExps (7)
                            IntConst (7)
                              CONSTANTINTD: 30
                        BlockItems (8)
                          While_Stmt (8)
                            Cond (8)
                              OPLIGHT (8)
                                LVal_EXP (8)
                                  LVal (8)
                                    IDENTIFIER j
                                    ArrayExps (8)
                                IntConst (8)
                                  CONSTANTINTD: 100
                            Block_Stmt (9)
                              Block (9)
                                BlockItems (9)
                                  Lval_Opassign_Stmt (9)
                                    LVal (9)
                                      IDENTIFIER j
                                      ArrayExps (9)
                                    PLUSExp (9)
                                      LVal_EXP (9)
                                        LVal (9)
                                          IDENTIFIER j
                                          ArrayExps (9)
                                      IntConst (9)
                                        CONSTANTINTD: 6
                          BlockItems (11)
                            Lval_Opassign_Stmt (11)
                              LVal (11)
                                IDENTIFIER j
                                ArrayExps (11)
                              MINUSExp (11)
                                LVal_EXP (11)
                                  LVal (11)
                                    IDENTIFIER j
                                    ArrayExps (11)
                                IntConst (11)
                                  CONSTANTINTD: 100
                BlockItems (13)
                  Return_Stmt (13)
                    (Exp) (13)
                      LVal_EXP (13)
                        LVal (13)
                          IDENTIFIER j
                          ArrayExps (13)
  CompUnits (16)
    FuncDef (16)
      NOFParam (16)
      Block (17)
        BlockItems (17)
          Return_Stmt (17)
            funcall (17)
              IDENTIFIER doubleWhile


===========================================================
Global
ID             category       type           depictor
               
doubleWhile    Function       TYPEINTEGER    NOT NULL       
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
Formal:doubleWhile
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
Local:doubleWhile
ID             category       type           depictor
              
i              Variable       TYPEINTEGER    NULL           
j              Variable       TYPEINTEGER    NULL           
               Block          BLOCKStmt      NOT NULL       
===========================================================
Local:block
ID             category       type           depictor
              
               Block          BLOCKStmt      NULL           
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NULL           
===========================================================
Local:main
ID             category       type           depictor
              
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result
TraverseScopeStack no result

~~~~TAC~~~~~
 No  Source Position	TACCode
_______________________________________
  0  (at line   0)	CALL main

  1  (at line   1)	FUNCTION doubleWhile :
  2  (at line   3)	_t21 := #5
  3  (at line   3)	 := _t21
  4  (at line   5)	_t20 := #7
  5  (at line   5)	 := _t20
  6  (at line   6)	LABEL label0 :
  7  (at line   6)	_t3 := 
  8  (at line   6)	_t6 := #100
  9  (at line   6)	IF _t3 < _t6 GOTO label1
 10  (at line   6)	GOTO label2
 11  (at line   6)	LABEL label1 :
 12  (at line   7)	_t18 := 
 13  (at line   7)	_t19 := #30
 14  (at line   7)	_t17 := _t18 + _t19
 15  (at line   7)	 := _t17
 16  (at line   8)	LABEL label3 :
 17  (at line   8)	_t10 := 
 18  (at line   8)	_t13 := #100
 19  (at line   8)	IF _t10 < _t13 GOTO label4
 20  (at line   8)	GOTO label5
 21  (at line   8)	LABEL label4 :
 22  (at line   9)	_t15 := 
 23  (at line   9)	_t16 := #6
 24  (at line   9)	_t14 := _t15 + _t16
 25  (at line   9)	 := _t14
 26  (at line   8)	GOTO label3
 27  (at line   8)	LABEL label5 :
 28  (at line  11)	_t8 := 
 29  (at line  11)	_t9 := #100
 30  (at line  11)	_t7 := _t8 - _t9
 31  (at line  11)	 := _t7
 32  (at line   6)	GOTO label0
 33  (at line   6)	LABEL label2 :
 34  (at line  13)	_t2 := 
 35  (at line  13)	_t1 := _t2
 36  (at line  13)	RETURN _t1

 37  (at line  16)	FUNCTION main :
 38  (at line  17)	_t0 := CALL doubleWhile
 39  (at line  17)	RETURN _t0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build assembly code
tac type FUNCTIONDF
tec type ASSIGN
findregister: insldr rd=0,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
tec type ASSIGN
findregister: insldr rd=1,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
tac type LABELDF
tec type ASSIGN
findregister: insldr rd=2,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=3,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFLT
tac type GOTO
tac type LABELDF
tec type ASSIGN
findregister: insldr rd=4,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=5,r1=11,r2 offset=0,op2type=1, insefft=0
tac type ADD
findregister: insldr rd=6,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
tac type LABELDF
tec type ASSIGN
findregister: insldr rd=8,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=9,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFLT
tac type GOTO
tac type LABELDF
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type ADD
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type GOTO
tac type LABELDF
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=10,r1=11,r2 offset=0,op2type=1, insefft=0
tac type SUB
compiler: ./ObjectCode/Arm.cpp:75: ARM::ARM(TACCode*, ScopeItem&): Assertion `code.dest.Type = VARIABLE' failed.
Aborted (core dumped)
