--(end of buffer or a NUL)
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("doubleWhile")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
<int>
<id,doubleWhile>
<(>
<)>
<{>
<int>
<id,i>
<;>
<id,i>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("5")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("j")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("j")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<int>
<id,j>
<;>
<id,j>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("7")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 103 ("while")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 96 ("<")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<while>
<(>
<id,i>
<<>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("100")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<intd>
ExpNumber:0
<)>
<{>
<id,i>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("i")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
Lval
<id,i>
<+>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("30")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 103 ("while")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("j")
--accepting rule at line 114 (" ")
--accepting rule at line 96 ("<")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<while>
<(>
<id,j>
<<>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("100")
--accepting rule at line 81 (")")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("j")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<intd>
ExpNumber:0
<)>
<{>
<id,j>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("j")
--accepting rule at line 114 (" ")
--accepting rule at line 84 ("+")
Lval
<id,j>
<+>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("6")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("j")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<id,j>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("j")
--accepting rule at line 114 (" ")
--accepting rule at line 85 ("-")
Lval
<id,j>
<->
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("100")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 80 ("(")
--accepting rule at line 112 ("j")
--accepting rule at line 81 (")")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<}>
<return>
<(>
<id,j>
<)>
33333333333
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 114 (" ")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 (" ")
--accepting rule at line 114 (" ")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("doubleWhile")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
Lval
<;>
<}>
<int>
<id,main>
<(>
<)>
<{>
<return>
<id,doubleWhile>
<(>
<)>
<;>
<}>
CompUnits (1)
  FuncDef (1)
    NOFParam (1)
    Block (2)
      BlockItems (2)
        VarDecl (2)
          IDENTIFIER i
        BlockItems (3)
          Lval_Opassign_Stmt (3)
            LVal (3)
              IDENTIFIER i
              ArrayExps (3)
            IntConst (3)
              CONSTANTINTD: 5
          BlockItems (4)
            VarDecl (4)
              IDENTIFIER j
            BlockItems (5)
              Lval_Opassign_Stmt (5)
                LVal (5)
                  IDENTIFIER j
                  ArrayExps (5)
                IntConst (5)
                  CONSTANTINTD: 7
              BlockItems (6)
                While_Stmt (6)
                  Cond (6)
                    OPLIGHT (6)
                      LVal_EXP (6)
                        LVal (6)
                          IDENTIFIER i
                          ArrayExps (6)
                      IntConst (6)
                        CONSTANTINTD: 100
                  Block_Stmt (7)
                    Block (7)
                      BlockItems (7)
                        Lval_Opassign_Stmt (7)
                          LVal (7)
                            IDENTIFIER i
                            ArrayExps (7)
                          PLUSExp (7)
                            LVal_EXP (7)
                              LVal (7)
                                IDENTIFIER i
                                ArrayExps (7)
                            IntConst (7)
                              CONSTANTINTD: 30
                        BlockItems (8)
                          While_Stmt (8)
                            Cond (8)
                              OPLIGHT (8)
                                LVal_EXP (8)
                                  LVal (8)
                                    IDENTIFIER j
                                    ArrayExps (8)
                                IntConst (8)
                                  CONSTANTINTD: 100
                            Block_Stmt (9)
                              Block (9)
                                BlockItems (9)
                                  Lval_Opassign_Stmt (9)
                                    LVal (9)
                                      IDENTIFIER j
                                      ArrayExps (9)
                                    PLUSExp (9)
                                      LVal_EXP (9)
                                        LVal (9)
                                          IDENTIFIER j
                                          ArrayExps (9)
                                      IntConst (9)
                                        CONSTANTINTD: 6
                          BlockItems (11)
                            Lval_Opassign_Stmt (11)
                              LVal (11)
                                IDENTIFIER j
                                ArrayExps (11)
                              MINUSExp (11)
                                LVal_EXP (11)
                                  LVal (11)
                                    IDENTIFIER j
                                    ArrayExps (11)
                                IntConst (11)
                                  CONSTANTINTD: 100
                BlockItems (13)
                  Return_Stmt (13)
                    (Exp) (13)
                      LVal_EXP (13)
                        LVal (13)
                          IDENTIFIER j
                          ArrayExps (13)
  CompUnits (16)
    FuncDef (16)
      NOFParam (16)
      Block (17)
        BlockItems (17)
          Return_Stmt (17)
            funcall (17)
              IDENTIFIER doubleWhile


===========================================================
Global
ID             category       type           depictor
               
doubleWhile    Function       TYPEINTEGER    NOT NULL       
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Formal:doubleWhile
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
===========================================================
Local:doubleWhile
ID             category       type           depictor
              
i              Variable       TYPEINTEGER    NULL           
j              Variable       TYPEINTEGER    NULL           
               Block          BLOCKStmt      NOT NULL       
===========================================================
===========================================================
Local:block
ID             category       type           depictor
              
               Block          BLOCKStmt      NULL           
===========================================================
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NULL           
Segmentation fault (core dumped)
