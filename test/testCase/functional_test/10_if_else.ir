arg S
--(end of buffer or a NUL)
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 100 ("int")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("main")
--accepting rule at line 80 ("(")
--accepting rule at line 81 (")")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 112 ("a")
--accepting rule at line 114 (" ")
--accepting rule at line 89 ("=")
<int>
<id,a>
<;>
<int>
<id,main>
<(>
<)>
<{>
<id,a>
<=>
33333333333
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("10")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 101 ("if")
--accepting rule at line 80 ("(")
--accepting rule at line 114 (" ")
--accepting rule at line 112 ("a")
--accepting rule at line 95 (">")
Lval
<intd>
ExpNumber:0
<;>
stmt1
<if>
<(>
<id,a>
<>>
33333333333
--accepting rule at line 111 ("0")
--accepting rule at line 114 (" ")
--accepting rule at line 81 (")")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 114 ("	")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 109 ("1")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 102 ("else")
--accepting rule at line 78 ("{")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 114 ("	")
--accepting rule at line 108 ("return")
--accepting rule at line 114 (" ")
--accepting rule at line 111 ("0")
--accepting rule at line 75 (";")
--accepting rule at line 115 ("
")
--accepting rule at line 114 ("	")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--accepting rule at line 79 ("}")
--accepting rule at line 115 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
Lval
<into>
ExpNumber:0
<)>
<{>
<return>
<intd>
ExpNumber:0
<;>
<}>
<else>
<{>
<return>
<into>
ExpNumber:0
<;>
<}>
<}>
CompUnits (1)
  VarDecl (1)
    IDENTIFIER a
  CompUnits (2)
    FuncDef (2)
      NOFParam (2)
      Block (3)
        BlockItems (3)
          Lval_Opassign_Stmt (3)
            LVal (3)
              IDENTIFIER a
              ArrayExps (3)
            IntConst (3)
              CONSTANTINTD: 10
          BlockItems (4)
            IF_ELSE_Stmt (4)
              Cond (4)
                OPGREAT (4)
                  LVal_EXP (4)
                    LVal (4)
                      IDENTIFIER a
                      ArrayExps (4)
                  IntConst (4)
                    CONSTANTOCT: 0
              Block_Stmt (5)
                Block (5)
                  BlockItems (5)
                    Return_Stmt (5)
                      IntConst (5)
                        CONSTANTINTD: 1
              Block_Stmt (8)
                Block (8)
                  BlockItems (8)
                    Return_Stmt (8)
                      IntConst (8)
                        CONSTANTOCT: 0


===========================================================
Global
ID             category       type           depictor
               
a              Variable       TYPEINTEGER    NULL           
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
===========================================================
===========================================================
Local:main
ID             category       type           depictor
              
               Block          BLOCKStmt      NULL           
               Block          BLOCKStmt      NULL           
===========================================================
789
789
789
789
789
789
789
789
789
789
789
789
789
789

~~~~TAC~~~~~
 No  Source Position	TACCode
_______________________________________
  0  (at line   0)	CALL main

  1  (at line   2)	FUNCTION main :
  2  (at line   3)	_t0 := #10
  3  (at line   3)	a := _t0
  4  (at line   4)	_t1 := a
  5  (at line   4)	_t4 := #0
  6  (at line   4)	IF _t1 > _t4 GOTO label0
  7  (at line   4)	GOTO label1
  8  (at line   4)	LABEL label0 :
  9  (at line   5)	_t5 := #1
 10  (at line   5)	RETURN _t5
 11  (at line   4)	GOTO label2
 12  (at line   4)	LABEL label1 :
 13  (at line   8)	_t6 := #0
 14  (at line   8)	RETURN _t6
 15  (at line   4)	LABEL label2 :


===========================================================
Global
ID             category       type           depictor
               
a              Variable       TYPEINTEGER    NULL           
main           Function       TYPEINTEGER    NOT NULL       
===========================================================
===========================================================
Formal:main
ID             category       type           depictor
              
               NOParam                       NOT NULL       
scope type is wrong
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build assembly code
tac type FUNCTIONDF
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t0
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t1
scope type not local in functiondf
scopeprev:0
Variable offset count+4 :_t4
Variable offset count+4 :_t5
Variable offset count+4 :_t6
tec type ASSIGN
findregister: insldr rd=0,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=1,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=2,r1=11,r2 offset=0,op2type=1, insefft=0
tec type ASSIGN
findregister: insldr rd=3,r1=11,r2 offset=0,op2type=1, insefft=0
tac type IFGT
ControlInstruction String: ControlInstruction tostring
INS B tostring
BGT L0

tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L1

tac type LABELDF
L0:

tec type ASSIGN
findregister: insldr rd=4,r1=11,r2 offset=0,op2type=1, insefft=0
tac type RETURN
tac type ARG
tac type GOTO
Goto string  ControlInstruction tostring
INS B tostring
B L2

tac type LABELDF
L1:

tec type ASSIGN
findregister: insldr rd=5,r1=11,r2 offset=0,op2type=1, insefft=0
tac type RETURN
tac type ARG
tac type LABELDF
L2:

tac build complete
instruction number1
instruction number2
push instruction
instruction number3
instruction number4
instruction number5
ldr instruction
op2type==1
instruction number6
instruction number7
ldr instruction
op2type==1
instruction number8
instruction number9
ldr instruction
op2type==1
instruction number10
instruction number11
ldr instruction
op2type==1
instruction number12
instruction number13
instruction number14
 ControlInstruction tostring
INS B tostring
instruction number15
 ControlInstruction tostring
INS B tostring
instruction number16
instruction number17
ldr instruction
op2type==1
instruction number18
instruction number19
instruction number20
instruction number21
instruction number22
 ControlInstruction tostring
INS BX tostring
instruction number23
 ControlInstruction tostring
INS B tostring
instruction number24
instruction number25
ldr instruction
op2type==1
instruction number26
instruction number27
instruction number28
instruction number29
instruction number30
 ControlInstruction tostring
INS BX tostring
instruction number31
#armv7 assembly code
main:
PUSH {fp}
ADD  fp, sp, #0
SUB sp, sp, #0
LDR r0, [fp, 0x0]
MOV r0, #10
LDR r1, [fp, 0x0]
ADD  r1, r0, #0
LDR r2, [fp, 0x0]
ADD  r2, r1, #0
LDR r3, [fp, 0x0]
MOV r3, #0
CMP r2, r3, 
BGT L0
B L1
L0:
LDR r4, [fp, 0x0]
MOV r4, #1
ADD  r0, r4, #0
ADD  sp, fp, #0
POP {fp}
BX lr
B L2
L1:
LDR r5, [fp, 0x0]
MOV r5, #0
ADD  r0, r5, #0
ADD  sp, fp, #0
POP {fp}
BX lr
L2:

output file open error
